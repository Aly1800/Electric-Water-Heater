
Electric_Water_Heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ee6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002ee6  00002f7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800076  00800076  00002f90  2**0
                  ALLOC
  3 .stab         00003a38  00000000  00000000  00002f90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bfe  00000000  00000000  000069c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000085c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008706  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008876  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a4bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b3aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c158  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c545  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cd13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <main>
      8a:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_voidInit>:
#include "../../Service/Std_type.h"
#include "../../Service/bit_math.h"
#include "UART_int.h"
#include <avr/io.h>

void UART_voidInit(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
    // Baud Rate: 9600 (for 8MHz)
    UBRRH = 0;
     b4e:	e0 e4       	ldi	r30, 0x40	; 64
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	10 82       	st	Z, r1
    UCSRB = (1 << TXEN);
     b54:	ea e2       	ldi	r30, 0x2A	; 42
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	88 e0       	ldi	r24, 0x08	; 8
     b5a:	80 83       	st	Z, r24
    UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
     b5c:	e0 e4       	ldi	r30, 0x40	; 64
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	86 e8       	ldi	r24, 0x86	; 134
     b62:	80 83       	st	Z, r24
    UBRRL = 51;
     b64:	e9 e2       	ldi	r30, 0x29	; 41
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	83 e3       	ldi	r24, 0x33	; 51
     b6a:	80 83       	st	Z, r24

}
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <UART_voidTransmit>:

void UART_voidTransmit(u8 data) {
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	0f 92       	push	r0
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	89 83       	std	Y+1, r24	; 0x01
    while (!( UCSRA & (1 << UDRE)));
     b7e:	eb e2       	ldi	r30, 0x2B	; 43
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	88 2f       	mov	r24, r24
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	80 72       	andi	r24, 0x20	; 32
     b8a:	90 70       	andi	r25, 0x00	; 0
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	b9 f3       	breq	.-18     	; 0xb7e <UART_voidTransmit+0xc>
    UDR = data;
     b90:	ec e2       	ldi	r30, 0x2C	; 44
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	80 83       	st	Z, r24
}
     b98:	0f 90       	pop	r0
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	08 95       	ret

00000ba0 <UART_voidTransmitString>:

void UART_voidTransmitString(const char* str) {
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <UART_voidTransmitString+0x6>
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	9a 83       	std	Y+2, r25	; 0x02
     bac:	89 83       	std	Y+1, r24	; 0x01
     bae:	0b c0       	rjmp	.+22     	; 0xbc6 <UART_voidTransmitString+0x26>
    while (*str) {
        UART_voidTransmit(*str++);
     bb0:	e9 81       	ldd	r30, Y+1	; 0x01
     bb2:	fa 81       	ldd	r31, Y+2	; 0x02
     bb4:	20 81       	ld	r18, Z
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	9a 81       	ldd	r25, Y+2	; 0x02
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	9a 83       	std	Y+2, r25	; 0x02
     bbe:	89 83       	std	Y+1, r24	; 0x01
     bc0:	82 2f       	mov	r24, r18
     bc2:	0e 94 b9 05 	call	0xb72	; 0xb72 <UART_voidTransmit>
    while (!( UCSRA & (1 << UDRE)));
    UDR = data;
}

void UART_voidTransmitString(const char* str) {
    while (*str) {
     bc6:	e9 81       	ldd	r30, Y+1	; 0x01
     bc8:	fa 81       	ldd	r31, Y+2	; 0x02
     bca:	80 81       	ld	r24, Z
     bcc:	88 23       	and	r24, r24
     bce:	81 f7       	brne	.-32     	; 0xbb0 <UART_voidTransmitString+0x10>
        UART_voidTransmit(*str++);
    }
}
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <UART_voidSendData>:

void UART_voidSendData(u8 data) {
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	0f 92       	push	r0
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	89 83       	std	Y+1, r24	; 0x01
    while (GET_BIT(UCSRA, UDRE) == 0);
     be6:	eb e2       	ldi	r30, 0x2B	; 43
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	82 95       	swap	r24
     bee:	86 95       	lsr	r24
     bf0:	87 70       	andi	r24, 0x07	; 7
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	81 70       	andi	r24, 0x01	; 1
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	a1 f3       	breq	.-24     	; 0xbe6 <UART_voidSendData+0xc>

    UDR = data;
     bfe:	ec e2       	ldi	r30, 0x2C	; 44
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	80 83       	st	Z, r24
}
     c06:	0f 90       	pop	r0
     c08:	cf 91       	pop	r28
     c0a:	df 91       	pop	r29
     c0c:	08 95       	ret

00000c0e <UART_voidTransmitNumber>:

void UART_voidTransmitNumber(u16 num) {
     c0e:	df 93       	push	r29
     c10:	cf 93       	push	r28
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	28 97       	sbiw	r28, 0x08	; 8
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
     c22:	98 87       	std	Y+8, r25	; 0x08
     c24:	8f 83       	std	Y+7, r24	; 0x07
    char buffer[6];
    itoa(num, buffer, 10);
     c26:	8f 81       	ldd	r24, Y+7	; 0x07
     c28:	98 85       	ldd	r25, Y+8	; 0x08
     c2a:	9e 01       	movw	r18, r28
     c2c:	2f 5f       	subi	r18, 0xFF	; 255
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	b9 01       	movw	r22, r18
     c32:	4a e0       	ldi	r20, 0x0A	; 10
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	0e 94 40 17 	call	0x2e80	; 0x2e80 <itoa>
    UART_voidTransmitString(buffer);
     c3a:	ce 01       	movw	r24, r28
     c3c:	01 96       	adiw	r24, 0x01	; 1
     c3e:	0e 94 d0 05 	call	0xba0	; 0xba0 <UART_voidTransmitString>
}
     c42:	28 96       	adiw	r28, 0x08	; 8
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <UART_voidSendString>:

void UART_voidSendString(const char* str) {
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	00 d0       	rcall	.+0      	; 0xc5a <UART_voidSendString+0x6>
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	9a 83       	std	Y+2, r25	; 0x02
     c60:	89 83       	std	Y+1, r24	; 0x01
     c62:	0b c0       	rjmp	.+22     	; 0xc7a <UART_voidSendString+0x26>
	while(*str) {
		UART_voidSendData(*str++);
     c64:	e9 81       	ldd	r30, Y+1	; 0x01
     c66:	fa 81       	ldd	r31, Y+2	; 0x02
     c68:	20 81       	ld	r18, Z
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	9a 81       	ldd	r25, Y+2	; 0x02
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	9a 83       	std	Y+2, r25	; 0x02
     c72:	89 83       	std	Y+1, r24	; 0x01
     c74:	82 2f       	mov	r24, r18
     c76:	0e 94 ed 05 	call	0xbda	; 0xbda <UART_voidSendData>
    itoa(num, buffer, 10);
    UART_voidTransmitString(buffer);
}

void UART_voidSendString(const char* str) {
	while(*str) {
     c7a:	e9 81       	ldd	r30, Y+1	; 0x01
     c7c:	fa 81       	ldd	r31, Y+2	; 0x02
     c7e:	80 81       	ld	r24, Z
     c80:	88 23       	and	r24, r24
     c82:	81 f7       	brne	.-32     	; 0xc64 <UART_voidSendString+0x10>
		UART_voidSendData(*str++);
	}
}
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	cf 91       	pop	r28
     c8a:	df 91       	pop	r29
     c8c:	08 95       	ret

00000c8e <TIMER0_Init>:
#include <avr/interrupt.h>
#include <util/delay.h>

static Timer0_CmpFunc_t g_Timer0CmpCallback = NULL;

void TIMER0_Init(void) {
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
    // Clear TCCR0
    TIMER0_TCCR0_REG = 0;
     c96:	e3 e5       	ldi	r30, 0x53	; 83
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	10 82       	st	Z, r1
    // CTC mode: WGM01 = 1
    SET_BIT(TIMER0_TCCR0_REG, TIMER0_TCCR0_WGM01);
     c9c:	a3 e5       	ldi	r26, 0x53	; 83
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e3 e5       	ldi	r30, 0x53	; 83
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	88 60       	ori	r24, 0x08	; 8
     ca8:	8c 93       	st	X, r24
    // Set compare value
    TIMER0_OCR0_REG = 250;
     caa:	ec e5       	ldi	r30, 0x5C	; 92
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	8a ef       	ldi	r24, 0xFA	; 250
     cb0:	80 83       	st	Z, r24
    // Enable OCIE0 interrupt
    SET_BIT(TIMER0_TIMSK_REG, TIMER0_TIMSK_OCIE0);
     cb2:	a9 e5       	ldi	r26, 0x59	; 89
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e9 e5       	ldi	r30, 0x59	; 89
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	82 60       	ori	r24, 0x02	; 2
     cbe:	8c 93       	st	X, r24
    SET_BIT(SREG_REG, GIE_BIT);
     cc0:	af e5       	ldi	r26, 0x5F	; 95
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	ef e5       	ldi	r30, 0x5F	; 95
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	80 68       	ori	r24, 0x80	; 128
     ccc:	8c 93       	st	X, r24
}
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <TIMER0_SetCompareMatchCallback>:

void TIMER0_SetCompareMatchCallback(Timer0_CmpFunc_t callback) {
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <TIMER0_SetCompareMatchCallback+0x6>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
    g_Timer0CmpCallback = callback;
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	9a 81       	ldd	r25, Y+2	; 0x02
     ce6:	90 93 77 00 	sts	0x0077, r25
     cea:	80 93 76 00 	sts	0x0076, r24
}
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	08 95       	ret

00000cf8 <TIMER0_Start>:

void TIMER0_Start(void) {
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
	 SET_BIT(TIMER0_TCCR0_REG, 2);
     d00:	a3 e5       	ldi	r26, 0x53	; 83
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e3 e5       	ldi	r30, 0x53	; 83
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	84 60       	ori	r24, 0x04	; 4
     d0c:	8c 93       	st	X, r24
	 SET_BIT(TIMER0_TCCR0_REG, 0);
     d0e:	a3 e5       	ldi	r26, 0x53	; 83
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e3 e5       	ldi	r30, 0x53	; 83
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	81 60       	ori	r24, 0x01	; 1
     d1a:	8c 93       	st	X, r24
}
     d1c:	cf 91       	pop	r28
     d1e:	df 91       	pop	r29
     d20:	08 95       	ret

00000d22 <TIMER0_Stop>:

void TIMER0_Stop(void) {
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
    // Clear prescaler bits
    TIMER0_TCCR0_REG &= 0xF8;
     d2a:	a3 e5       	ldi	r26, 0x53	; 83
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e3 e5       	ldi	r30, 0x53	; 83
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	88 7f       	andi	r24, 0xF8	; 248
     d36:	8c 93       	st	X, r24
}
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <__vector_10>:

// ISR for Timer0 Compare Match
void __vector_10(void) __attribute__((signal));
void __vector_10(void) {
     d3e:	1f 92       	push	r1
     d40:	0f 92       	push	r0
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	0f 92       	push	r0
     d46:	11 24       	eor	r1, r1
     d48:	2f 93       	push	r18
     d4a:	3f 93       	push	r19
     d4c:	4f 93       	push	r20
     d4e:	5f 93       	push	r21
     d50:	6f 93       	push	r22
     d52:	7f 93       	push	r23
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer0CmpCallback) {
     d68:	80 91 76 00 	lds	r24, 0x0076
     d6c:	90 91 77 00 	lds	r25, 0x0077
     d70:	00 97       	sbiw	r24, 0x00	; 0
     d72:	29 f0       	breq	.+10     	; 0xd7e <__vector_10+0x40>
        g_Timer0CmpCallback();
     d74:	e0 91 76 00 	lds	r30, 0x0076
     d78:	f0 91 77 00 	lds	r31, 0x0077
     d7c:	09 95       	icall
    }
}
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	ff 91       	pop	r31
     d84:	ef 91       	pop	r30
     d86:	bf 91       	pop	r27
     d88:	af 91       	pop	r26
     d8a:	9f 91       	pop	r25
     d8c:	8f 91       	pop	r24
     d8e:	7f 91       	pop	r23
     d90:	6f 91       	pop	r22
     d92:	5f 91       	pop	r21
     d94:	4f 91       	pop	r20
     d96:	3f 91       	pop	r19
     d98:	2f 91       	pop	r18
     d9a:	0f 90       	pop	r0
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	0f 90       	pop	r0
     da0:	1f 90       	pop	r1
     da2:	18 95       	reti

00000da4 <TIMER0_GetTicks>:

static volatile u32 g_timer0Ticks = 0;

u32 TIMER0_GetTicks(void) {
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
    return g_timer0Ticks;
     dac:	80 91 78 00 	lds	r24, 0x0078
     db0:	90 91 79 00 	lds	r25, 0x0079
     db4:	a0 91 7a 00 	lds	r26, 0x007A
     db8:	b0 91 7b 00 	lds	r27, 0x007B
}
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <EXTI_voidEnable>:
#include "EXTI_int.h"

void (*pfn)(void)=NULL;

void EXTI_voidEnable(u8 Copy_u8Int_ID)
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	00 d0       	rcall	.+0      	; 0xdcc <EXTI_voidEnable+0x6>
     dcc:	0f 92       	push	r0
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Int_ID)
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	3b 83       	std	Y+3, r19	; 0x03
     ddc:	2a 83       	std	Y+2, r18	; 0x02
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	9b 81       	ldd	r25, Y+3	; 0x03
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	91 05       	cpc	r25, r1
     de6:	89 f0       	breq	.+34     	; 0xe0a <EXTI_voidEnable+0x44>
     de8:	2a 81       	ldd	r18, Y+2	; 0x02
     dea:	3b 81       	ldd	r19, Y+3	; 0x03
     dec:	22 30       	cpi	r18, 0x02	; 2
     dee:	31 05       	cpc	r19, r1
     df0:	a1 f0       	breq	.+40     	; 0xe1a <EXTI_voidEnable+0x54>
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	9b 81       	ldd	r25, Y+3	; 0x03
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	b9 f4       	brne	.+46     	; 0xe28 <EXTI_voidEnable+0x62>
	{
	case EXTI_INT0 : SET_BIT(EXTI_GICR_REG , EXTI_GICR_INT0);   break;
     dfa:	ab e5       	ldi	r26, 0x5B	; 91
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	eb e5       	ldi	r30, 0x5B	; 91
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 64       	ori	r24, 0x40	; 64
     e06:	8c 93       	st	X, r24
     e08:	0f c0       	rjmp	.+30     	; 0xe28 <EXTI_voidEnable+0x62>
	case EXTI_INT1 : SET_BIT(EXTI_GICR_REG , EXTI_GICR_INT1);   break;
     e0a:	ab e5       	ldi	r26, 0x5B	; 91
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	eb e5       	ldi	r30, 0x5B	; 91
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	80 68       	ori	r24, 0x80	; 128
     e16:	8c 93       	st	X, r24
     e18:	07 c0       	rjmp	.+14     	; 0xe28 <EXTI_voidEnable+0x62>
	case EXTI_INT2 : SET_BIT(EXTI_GICR_REG , EXTI_GICR_INT2);   break;
     e1a:	ab e5       	ldi	r26, 0x5B	; 91
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	eb e5       	ldi	r30, 0x5B	; 91
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	80 62       	ori	r24, 0x20	; 32
     e26:	8c 93       	st	X, r24
	default        : /*error*/ break ;

	}
}
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <EXTI_voidDisable>:

void EXTI_voidDisable(u8 Copy_u8Int_ID){
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	00 d0       	rcall	.+0      	; 0xe3a <EXTI_voidDisable+0x6>
     e3a:	0f 92       	push	r0
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Int_ID)
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	3b 83       	std	Y+3, r19	; 0x03
     e4a:	2a 83       	std	Y+2, r18	; 0x02
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	9b 81       	ldd	r25, Y+3	; 0x03
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	91 05       	cpc	r25, r1
     e54:	89 f0       	breq	.+34     	; 0xe78 <EXTI_voidDisable+0x44>
     e56:	2a 81       	ldd	r18, Y+2	; 0x02
     e58:	3b 81       	ldd	r19, Y+3	; 0x03
     e5a:	22 30       	cpi	r18, 0x02	; 2
     e5c:	31 05       	cpc	r19, r1
     e5e:	a1 f0       	breq	.+40     	; 0xe88 <EXTI_voidDisable+0x54>
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	9b 81       	ldd	r25, Y+3	; 0x03
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	b9 f4       	brne	.+46     	; 0xe96 <EXTI_voidDisable+0x62>
	{
	case EXTI_INT0 : CLR_BIT(EXTI_GICR_REG , EXTI_GICR_INT0);   break;
     e68:	ab e5       	ldi	r26, 0x5B	; 91
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	eb e5       	ldi	r30, 0x5B	; 91
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	8f 7b       	andi	r24, 0xBF	; 191
     e74:	8c 93       	st	X, r24
     e76:	0f c0       	rjmp	.+30     	; 0xe96 <EXTI_voidDisable+0x62>
	case EXTI_INT1 : CLR_BIT(EXTI_GICR_REG , EXTI_GICR_INT1);   break;
     e78:	ab e5       	ldi	r26, 0x5B	; 91
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	eb e5       	ldi	r30, 0x5B	; 91
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	8f 77       	andi	r24, 0x7F	; 127
     e84:	8c 93       	st	X, r24
     e86:	07 c0       	rjmp	.+14     	; 0xe96 <EXTI_voidDisable+0x62>
	case EXTI_INT2 : CLR_BIT(EXTI_GICR_REG , EXTI_GICR_INT2);   break;
     e88:	ab e5       	ldi	r26, 0x5B	; 91
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	eb e5       	ldi	r30, 0x5B	; 91
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8f 7d       	andi	r24, 0xDF	; 223
     e94:	8c 93       	st	X, r24
	default        : /*error*/ break ;

	}
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <EXTI_voidInit>:

void EXTI_voidInit(void) {
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INT0_INITIAL_VAL == EXTI_ENABLED
    SET_BIT(EXTI_GICR_REG, EXTI_GICR_INT0);
#elif EXTI_INT0_INITIAL_VAL == EXTI_DISABLED
    CLR_BIT(EXTI_GICR_REG, EXTI_GICR_INT0);
     eaa:	ab e5       	ldi	r26, 0x5B	; 91
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	eb e5       	ldi	r30, 0x5B	; 91
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 7b       	andi	r24, 0xBF	; 191
     eb6:	8c 93       	st	X, r24
#endif

#if EXTI_INT1_INITIAL_VAL == EXTI_ENABLED
    SET_BIT(EXTI_GICR_REG, EXTI_GICR_INT1);
#elif EXTI_INT1_INITIAL_VAL == EXTI_DISABLED
    CLR_BIT(EXTI_GICR_REG, EXTI_GICR_INT1);
     eb8:	ab e5       	ldi	r26, 0x5B	; 91
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	eb e5       	ldi	r30, 0x5B	; 91
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8f 77       	andi	r24, 0x7F	; 127
     ec4:	8c 93       	st	X, r24
#endif

#if EXTI_INT2_INITIAL_VAL == EXTI_ENABLED
    SET_BIT(EXTI_GICR_REG, EXTI_GICR_INT2);
#elif EXTI_INT2_INITIAL_VAL == EXTI_DISABLED
    CLR_BIT(EXTI_GICR_REG, EXTI_GICR_INT2);
     ec6:	ab e5       	ldi	r26, 0x5B	; 91
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	eb e5       	ldi	r30, 0x5B	; 91
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8f 7d       	andi	r24, 0xDF	; 223
     ed2:	8c 93       	st	X, r24
#endif
}
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <EXTI_voidChangeSenseControl>:

void EXTI_voidChangeSenseControl(u8 Copy_u8Int_ID , u8 Copy_u8SenseLevel)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	28 97       	sbiw	r28, 0x08	; 8
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	89 83       	std	Y+1, r24	; 0x01
     ef0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Int_ID)
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	38 87       	std	Y+8, r19	; 0x08
     efa:	2f 83       	std	Y+7, r18	; 0x07
     efc:	8f 81       	ldd	r24, Y+7	; 0x07
     efe:	98 85       	ldd	r25, Y+8	; 0x08
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	91 05       	cpc	r25, r1
     f04:	09 f4       	brne	.+2      	; 0xf08 <EXTI_voidChangeSenseControl+0x2e>
     f06:	67 c0       	rjmp	.+206    	; 0xfd6 <EXTI_voidChangeSenseControl+0xfc>
     f08:	2f 81       	ldd	r18, Y+7	; 0x07
     f0a:	38 85       	ldd	r19, Y+8	; 0x08
     f0c:	22 30       	cpi	r18, 0x02	; 2
     f0e:	31 05       	cpc	r19, r1
     f10:	09 f4       	brne	.+2      	; 0xf14 <EXTI_voidChangeSenseControl+0x3a>
     f12:	bd c0       	rjmp	.+378    	; 0x108e <EXTI_voidChangeSenseControl+0x1b4>
     f14:	8f 81       	ldd	r24, Y+7	; 0x07
     f16:	98 85       	ldd	r25, Y+8	; 0x08
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	09 f0       	breq	.+2      	; 0xf1e <EXTI_voidChangeSenseControl+0x44>
     f1c:	cd c0       	rjmp	.+410    	; 0x10b8 <EXTI_voidChangeSenseControl+0x1de>
	{
	case EXTI_INT0 :
		switch (Copy_u8SenseLevel){
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	3e 83       	std	Y+6, r19	; 0x06
     f26:	2d 83       	std	Y+5, r18	; 0x05
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	9e 81       	ldd	r25, Y+6	; 0x06
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <EXTI_voidChangeSenseControl+0x5a>
     f32:	42 c0       	rjmp	.+132    	; 0xfb8 <EXTI_voidChangeSenseControl+0xde>
     f34:	2d 81       	ldd	r18, Y+5	; 0x05
     f36:	3e 81       	ldd	r19, Y+6	; 0x06
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	31 05       	cpc	r19, r1
     f3c:	2c f4       	brge	.+10     	; 0xf48 <EXTI_voidChangeSenseControl+0x6e>
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	61 f0       	breq	.+24     	; 0xf5e <EXTI_voidChangeSenseControl+0x84>
     f46:	b8 c0       	rjmp	.+368    	; 0x10b8 <EXTI_voidChangeSenseControl+0x1de>
     f48:	2d 81       	ldd	r18, Y+5	; 0x05
     f4a:	3e 81       	ldd	r19, Y+6	; 0x06
     f4c:	22 30       	cpi	r18, 0x02	; 2
     f4e:	31 05       	cpc	r19, r1
     f50:	a9 f0       	breq	.+42     	; 0xf7c <EXTI_voidChangeSenseControl+0xa2>
     f52:	8d 81       	ldd	r24, Y+5	; 0x05
     f54:	9e 81       	ldd	r25, Y+6	; 0x06
     f56:	83 30       	cpi	r24, 0x03	; 3
     f58:	91 05       	cpc	r25, r1
     f5a:	f9 f0       	breq	.+62     	; 0xf9a <EXTI_voidChangeSenseControl+0xc0>
     f5c:	ad c0       	rjmp	.+346    	; 0x10b8 <EXTI_voidChangeSenseControl+0x1de>
		case EXTI_LOW_LEVEL :
			CLR_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC00);
     f5e:	a5 e5       	ldi	r26, 0x55	; 85
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e5 e5       	ldi	r30, 0x55	; 85
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	8e 7f       	andi	r24, 0xFE	; 254
     f6a:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC01);
     f6c:	a5 e5       	ldi	r26, 0x55	; 85
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e5 e5       	ldi	r30, 0x55	; 85
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8d 7f       	andi	r24, 0xFD	; 253
     f78:	8c 93       	st	X, r24
     f7a:	9e c0       	rjmp	.+316    	; 0x10b8 <EXTI_voidChangeSenseControl+0x1de>
			break ;
		case EXTI_FALLING_EDGE :
			CLR_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC00);
     f7c:	a5 e5       	ldi	r26, 0x55	; 85
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e5 e5       	ldi	r30, 0x55	; 85
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8e 7f       	andi	r24, 0xFE	; 254
     f88:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC01);
     f8a:	a5 e5       	ldi	r26, 0x55	; 85
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e5 e5       	ldi	r30, 0x55	; 85
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	82 60       	ori	r24, 0x02	; 2
     f96:	8c 93       	st	X, r24
     f98:	8f c0       	rjmp	.+286    	; 0x10b8 <EXTI_voidChangeSenseControl+0x1de>
			break ;
		case EXTI_RISING_EDGE :
			SET_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC00);
     f9a:	a5 e5       	ldi	r26, 0x55	; 85
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e5 e5       	ldi	r30, 0x55	; 85
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	81 60       	ori	r24, 0x01	; 1
     fa6:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC01);
     fa8:	a5 e5       	ldi	r26, 0x55	; 85
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e5 e5       	ldi	r30, 0x55	; 85
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	82 60       	ori	r24, 0x02	; 2
     fb4:	8c 93       	st	X, r24
     fb6:	80 c0       	rjmp	.+256    	; 0x10b8 <EXTI_voidChangeSenseControl+0x1de>
			break ;
		case EXTI_ANY_CHANGE:
			SET_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC00);
     fb8:	a5 e5       	ldi	r26, 0x55	; 85
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e5 e5       	ldi	r30, 0x55	; 85
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	81 60       	ori	r24, 0x01	; 1
     fc4:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC01);
     fc6:	a5 e5       	ldi	r26, 0x55	; 85
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e5 e5       	ldi	r30, 0x55	; 85
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	8d 7f       	andi	r24, 0xFD	; 253
     fd2:	8c 93       	st	X, r24
     fd4:	71 c0       	rjmp	.+226    	; 0x10b8 <EXTI_voidChangeSenseControl+0x1de>
		default: /*error */ break ;
		}
		break ;

		case EXTI_INT1 :
			switch (Copy_u8SenseLevel){
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	3c 83       	std	Y+4, r19	; 0x04
     fde:	2b 83       	std	Y+3, r18	; 0x03
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	9c 81       	ldd	r25, Y+4	; 0x04
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	91 05       	cpc	r25, r1
     fe8:	09 f4       	brne	.+2      	; 0xfec <EXTI_voidChangeSenseControl+0x112>
     fea:	42 c0       	rjmp	.+132    	; 0x1070 <EXTI_voidChangeSenseControl+0x196>
     fec:	2b 81       	ldd	r18, Y+3	; 0x03
     fee:	3c 81       	ldd	r19, Y+4	; 0x04
     ff0:	22 30       	cpi	r18, 0x02	; 2
     ff2:	31 05       	cpc	r19, r1
     ff4:	2c f4       	brge	.+10     	; 0x1000 <EXTI_voidChangeSenseControl+0x126>
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	61 f0       	breq	.+24     	; 0x1016 <EXTI_voidChangeSenseControl+0x13c>
     ffe:	5c c0       	rjmp	.+184    	; 0x10b8 <EXTI_voidChangeSenseControl+0x1de>
    1000:	2b 81       	ldd	r18, Y+3	; 0x03
    1002:	3c 81       	ldd	r19, Y+4	; 0x04
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	a9 f0       	breq	.+42     	; 0x1034 <EXTI_voidChangeSenseControl+0x15a>
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	9c 81       	ldd	r25, Y+4	; 0x04
    100e:	83 30       	cpi	r24, 0x03	; 3
    1010:	91 05       	cpc	r25, r1
    1012:	f9 f0       	breq	.+62     	; 0x1052 <EXTI_voidChangeSenseControl+0x178>
    1014:	51 c0       	rjmp	.+162    	; 0x10b8 <EXTI_voidChangeSenseControl+0x1de>
			case EXTI_LOW_LEVEL :
				CLR_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC10);
    1016:	a5 e5       	ldi	r26, 0x55	; 85
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e5 e5       	ldi	r30, 0x55	; 85
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8b 7f       	andi	r24, 0xFB	; 251
    1022:	8c 93       	st	X, r24
				CLR_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC11);
    1024:	a5 e5       	ldi	r26, 0x55	; 85
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e5 e5       	ldi	r30, 0x55	; 85
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	87 7f       	andi	r24, 0xF7	; 247
    1030:	8c 93       	st	X, r24
    1032:	42 c0       	rjmp	.+132    	; 0x10b8 <EXTI_voidChangeSenseControl+0x1de>
				break ;
			case EXTI_FALLING_EDGE :
				CLR_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC10);
    1034:	a5 e5       	ldi	r26, 0x55	; 85
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e5 e5       	ldi	r30, 0x55	; 85
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	8b 7f       	andi	r24, 0xFB	; 251
    1040:	8c 93       	st	X, r24
				SET_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC11);
    1042:	a5 e5       	ldi	r26, 0x55	; 85
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e5 e5       	ldi	r30, 0x55	; 85
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	88 60       	ori	r24, 0x08	; 8
    104e:	8c 93       	st	X, r24
    1050:	33 c0       	rjmp	.+102    	; 0x10b8 <EXTI_voidChangeSenseControl+0x1de>
				break ;
			case EXTI_RISING_EDGE :
				SET_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC10);
    1052:	a5 e5       	ldi	r26, 0x55	; 85
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e5 e5       	ldi	r30, 0x55	; 85
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	84 60       	ori	r24, 0x04	; 4
    105e:	8c 93       	st	X, r24
				SET_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC11);
    1060:	a5 e5       	ldi	r26, 0x55	; 85
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e5 e5       	ldi	r30, 0x55	; 85
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	88 60       	ori	r24, 0x08	; 8
    106c:	8c 93       	st	X, r24
    106e:	24 c0       	rjmp	.+72     	; 0x10b8 <EXTI_voidChangeSenseControl+0x1de>
				break ;
			case EXTI_ANY_CHANGE:
				SET_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC10);
    1070:	a5 e5       	ldi	r26, 0x55	; 85
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e5 e5       	ldi	r30, 0x55	; 85
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	84 60       	ori	r24, 0x04	; 4
    107c:	8c 93       	st	X, r24
				CLR_BIT(EXTI_MCUCR_REG,EXTI_MCUCR_ISC11);
    107e:	a5 e5       	ldi	r26, 0x55	; 85
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e5 e5       	ldi	r30, 0x55	; 85
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	87 7f       	andi	r24, 0xF7	; 247
    108a:	8c 93       	st	X, r24
    108c:	15 c0       	rjmp	.+42     	; 0x10b8 <EXTI_voidChangeSenseControl+0x1de>
			}
			break ;
			case EXTI_INT2 :
				/*0 --> falling */
				/*1 --> Rising */
				if (Copy_u8SenseLevel == EXTI_FALLING_EDGE)
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	82 30       	cpi	r24, 0x02	; 2
    1092:	41 f4       	brne	.+16     	; 0x10a4 <EXTI_voidChangeSenseControl+0x1ca>
				{

					CLR_BIT(EXTI_MCUCSR_REG,EXTI_MCUCSR_ISC2);
    1094:	a4 e5       	ldi	r26, 0x54	; 84
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e4 e5       	ldi	r30, 0x54	; 84
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	8f 7b       	andi	r24, 0xBF	; 191
    10a0:	8c 93       	st	X, r24
    10a2:	0a c0       	rjmp	.+20     	; 0x10b8 <EXTI_voidChangeSenseControl+0x1de>
				}
				else if (Copy_u8SenseLevel == EXTI_RISING_EDGE)
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	39 f4       	brne	.+14     	; 0x10b8 <EXTI_voidChangeSenseControl+0x1de>
				{

					SET_BIT(EXTI_MCUCSR_REG,EXTI_MCUCSR_ISC2);
    10aa:	a4 e5       	ldi	r26, 0x54	; 84
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e4 e5       	ldi	r30, 0x54	; 84
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	80 64       	ori	r24, 0x40	; 64
    10b6:	8c 93       	st	X, r24
				{
					/*error*/
				}
				break ;
	}
}
    10b8:	28 96       	adiw	r28, 0x08	; 8
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <EXTI_voidCallBack>:
void EXTI_voidCallBack(void (*fn)(void )){
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <EXTI_voidCallBack+0x6>
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	9a 83       	std	Y+2, r25	; 0x02
    10d6:	89 83       	std	Y+1, r24	; 0x01
	if(fn != NULL)
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	9a 81       	ldd	r25, Y+2	; 0x02
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	31 f0       	breq	.+12     	; 0x10ec <EXTI_voidCallBack+0x22>
	{
		pfn = fn;
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	90 93 7d 00 	sts	0x007D, r25
    10e8:	80 93 7c 00 	sts	0x007C, r24
	}else{
		return;
		/*error */
	}
}
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <__vector_1>:

void __vector_1 (void) __attribute__ ((signal)) ;
void __vector_1 (void){
    10f6:	1f 92       	push	r1
    10f8:	0f 92       	push	r0
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	0f 92       	push	r0
    10fe:	11 24       	eor	r1, r1
    1100:	2f 93       	push	r18
    1102:	3f 93       	push	r19
    1104:	4f 93       	push	r20
    1106:	5f 93       	push	r21
    1108:	6f 93       	push	r22
    110a:	7f 93       	push	r23
    110c:	8f 93       	push	r24
    110e:	9f 93       	push	r25
    1110:	af 93       	push	r26
    1112:	bf 93       	push	r27
    1114:	ef 93       	push	r30
    1116:	ff 93       	push	r31
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
	if(pfn != NULL)
    1120:	80 91 7c 00 	lds	r24, 0x007C
    1124:	90 91 7d 00 	lds	r25, 0x007D
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	29 f0       	breq	.+10     	; 0x1136 <__vector_1+0x40>
	{
		pfn();
    112c:	e0 91 7c 00 	lds	r30, 0x007C
    1130:	f0 91 7d 00 	lds	r31, 0x007D
    1134:	09 95       	icall
	}
}
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	ff 91       	pop	r31
    113c:	ef 91       	pop	r30
    113e:	bf 91       	pop	r27
    1140:	af 91       	pop	r26
    1142:	9f 91       	pop	r25
    1144:	8f 91       	pop	r24
    1146:	7f 91       	pop	r23
    1148:	6f 91       	pop	r22
    114a:	5f 91       	pop	r21
    114c:	4f 91       	pop	r20
    114e:	3f 91       	pop	r19
    1150:	2f 91       	pop	r18
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <EEPROM_voidInit>:
#include <util/delay.h>

#define EEPROM_TEMP_ADDR 0x00
#define WRITE_TIMEOUT 10000

void EEPROM_voidInit(void) {
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62

}
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <IN_EEPROM_voidReadDataByte>:

EEPROM_Status_t IN_EEPROM_voidReadDataByte(u16 Copy_u16Address, u8* Copy_pu8Data)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <IN_EEPROM_voidReadDataByte+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <IN_EEPROM_voidReadDataByte+0x8>
    1172:	0f 92       	push	r0
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	9a 83       	std	Y+2, r25	; 0x02
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	7c 83       	std	Y+4, r23	; 0x04
    117e:	6b 83       	std	Y+3, r22	; 0x03
    if(Copy_u16Address > EEPROM_MAX_ADDR) return EEPROM_INVALID_ADDRESS;
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	24 e0       	ldi	r18, 0x04	; 4
    1186:	80 30       	cpi	r24, 0x00	; 0
    1188:	92 07       	cpc	r25, r18
    118a:	18 f0       	brcs	.+6      	; 0x1192 <IN_EEPROM_voidReadDataByte+0x28>
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	8d 83       	std	Y+5, r24	; 0x05
    1190:	2a c0       	rjmp	.+84     	; 0x11e6 <IN_EEPROM_voidReadDataByte+0x7c>
    if(Copy_pu8Data == NULL) return EEPROM_INVALID_DATA;
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	19 f4       	brne	.+6      	; 0x11a0 <IN_EEPROM_voidReadDataByte+0x36>
    119a:	24 e0       	ldi	r18, 0x04	; 4
    119c:	2d 83       	std	Y+5, r18	; 0x05
    119e:	23 c0       	rjmp	.+70     	; 0x11e6 <IN_EEPROM_voidReadDataByte+0x7c>

    while(GET_BIT(IN_EEPROM_CTRL_REG, IN_EEPROM_CTRL_EEWE));
    11a0:	ec e3       	ldi	r30, 0x3C	; 60
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	86 95       	lsr	r24
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	81 70       	andi	r24, 0x01	; 1
    11ae:	90 70       	andi	r25, 0x00	; 0
    11b0:	88 23       	and	r24, r24
    11b2:	b1 f7       	brne	.-20     	; 0x11a0 <IN_EEPROM_voidReadDataByte+0x36>

    IN_EEPROM_EARL_REG = (u8)Copy_u16Address;
    11b4:	ee e3       	ldi	r30, 0x3E	; 62
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	80 83       	st	Z, r24
    IN_EEPROM_EARH_REG = (u8)(Copy_u16Address >> 8);
    11bc:	ef e3       	ldi	r30, 0x3F	; 63
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	9a 81       	ldd	r25, Y+2	; 0x02
    11c4:	89 2f       	mov	r24, r25
    11c6:	99 27       	eor	r25, r25
    11c8:	80 83       	st	Z, r24
    SET_BIT(IN_EEPROM_CTRL_REG, IN_EEPROM_CTRL_EERE);
    11ca:	ac e3       	ldi	r26, 0x3C	; 60
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	ec e3       	ldi	r30, 0x3C	; 60
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	81 60       	ori	r24, 0x01	; 1
    11d6:	8c 93       	st	X, r24
    *Copy_pu8Data = IN_EEPROM_DATA_REG;
    11d8:	ed e3       	ldi	r30, 0x3D	; 61
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	eb 81       	ldd	r30, Y+3	; 0x03
    11e0:	fc 81       	ldd	r31, Y+4	; 0x04
    11e2:	80 83       	st	Z, r24

    return EEPROM_OK;
    11e4:	1d 82       	std	Y+5, r1	; 0x05
    11e6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <IN_EEPROM_voidWriteDataByte>:

EEPROM_Status_t IN_EEPROM_voidWriteDataByte(u16 Copy_u16Address, u8 Copy_u8Data)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	29 97       	sbiw	r28, 0x09	; 9
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	9f 83       	std	Y+7, r25	; 0x07
    120e:	8e 83       	std	Y+6, r24	; 0x06
    1210:	68 87       	std	Y+8, r22	; 0x08
    if(Copy_u16Address > EEPROM_MAX_ADDR) return EEPROM_INVALID_ADDRESS;
    1212:	8e 81       	ldd	r24, Y+6	; 0x06
    1214:	9f 81       	ldd	r25, Y+7	; 0x07
    1216:	24 e0       	ldi	r18, 0x04	; 4
    1218:	80 30       	cpi	r24, 0x00	; 0
    121a:	92 07       	cpc	r25, r18
    121c:	18 f0       	brcs	.+6      	; 0x1224 <IN_EEPROM_voidWriteDataByte+0x2c>
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	89 87       	std	Y+9, r24	; 0x09
    1222:	5a c0       	rjmp	.+180    	; 0x12d8 <IN_EEPROM_voidWriteDataByte+0xe0>

    u8 sreg = SREG_REG;
    1224:	ef e5       	ldi	r30, 0x5F	; 95
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	8d 83       	std	Y+5, r24	; 0x05
    CLR_BIT(SREG_REG, GIE_BIT);
    122c:	af e5       	ldi	r26, 0x5F	; 95
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	ef e5       	ldi	r30, 0x5F	; 95
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8f 77       	andi	r24, 0x7F	; 127
    1238:	8c 93       	st	X, r24

    u32 timeout = 0;
    123a:	19 82       	std	Y+1, r1	; 0x01
    123c:	1a 82       	std	Y+2, r1	; 0x02
    123e:	1b 82       	std	Y+3, r1	; 0x03
    1240:	1c 82       	std	Y+4, r1	; 0x04
    1242:	1e c0       	rjmp	.+60     	; 0x1280 <IN_EEPROM_voidWriteDataByte+0x88>
    while(GET_BIT(IN_EEPROM_CTRL_REG, IN_EEPROM_CTRL_EEWE)) {
        if(++timeout > WRITE_TIMEOUT) {
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	ab 81       	ldd	r26, Y+3	; 0x03
    124a:	bc 81       	ldd	r27, Y+4	; 0x04
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	a1 1d       	adc	r26, r1
    1250:	b1 1d       	adc	r27, r1
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	9a 83       	std	Y+2, r25	; 0x02
    1256:	ab 83       	std	Y+3, r26	; 0x03
    1258:	bc 83       	std	Y+4, r27	; 0x04
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	9a 81       	ldd	r25, Y+2	; 0x02
    125e:	ab 81       	ldd	r26, Y+3	; 0x03
    1260:	bc 81       	ldd	r27, Y+4	; 0x04
    1262:	81 31       	cpi	r24, 0x11	; 17
    1264:	27 e2       	ldi	r18, 0x27	; 39
    1266:	92 07       	cpc	r25, r18
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	a2 07       	cpc	r26, r18
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	b2 07       	cpc	r27, r18
    1270:	38 f0       	brcs	.+14     	; 0x1280 <IN_EEPROM_voidWriteDataByte+0x88>
            SREG_REG = sreg;
    1272:	ef e5       	ldi	r30, 0x5F	; 95
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	80 83       	st	Z, r24
            return EEPROM_WRITE_TIMEOUT;
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	89 87       	std	Y+9, r24	; 0x09
    127e:	2c c0       	rjmp	.+88     	; 0x12d8 <IN_EEPROM_voidWriteDataByte+0xe0>

    u8 sreg = SREG_REG;
    CLR_BIT(SREG_REG, GIE_BIT);

    u32 timeout = 0;
    while(GET_BIT(IN_EEPROM_CTRL_REG, IN_EEPROM_CTRL_EEWE)) {
    1280:	ec e3       	ldi	r30, 0x3C	; 60
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	86 95       	lsr	r24
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	81 70       	andi	r24, 0x01	; 1
    128e:	90 70       	andi	r25, 0x00	; 0
    1290:	88 23       	and	r24, r24
    1292:	c1 f6       	brne	.-80     	; 0x1244 <IN_EEPROM_voidWriteDataByte+0x4c>
        if(++timeout > WRITE_TIMEOUT) {
            SREG_REG = sreg;
            return EEPROM_WRITE_TIMEOUT;
        }
    }
    IN_EEPROM_EARL_REG = (u8)Copy_u16Address;
    1294:	ee e3       	ldi	r30, 0x3E	; 62
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	8e 81       	ldd	r24, Y+6	; 0x06
    129a:	80 83       	st	Z, r24
    IN_EEPROM_EARH_REG = (u8)(Copy_u16Address >> 8);
    129c:	ef e3       	ldi	r30, 0x3F	; 63
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	8e 81       	ldd	r24, Y+6	; 0x06
    12a2:	9f 81       	ldd	r25, Y+7	; 0x07
    12a4:	89 2f       	mov	r24, r25
    12a6:	99 27       	eor	r25, r25
    12a8:	80 83       	st	Z, r24
    IN_EEPROM_DATA_REG = Copy_u8Data;
    12aa:	ed e3       	ldi	r30, 0x3D	; 61
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	88 85       	ldd	r24, Y+8	; 0x08
    12b0:	80 83       	st	Z, r24
    SET_BIT(IN_EEPROM_CTRL_REG, IN_EEPROM_CTRL_EEMWE);
    12b2:	ac e3       	ldi	r26, 0x3C	; 60
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	ec e3       	ldi	r30, 0x3C	; 60
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	84 60       	ori	r24, 0x04	; 4
    12be:	8c 93       	st	X, r24
    SET_BIT(IN_EEPROM_CTRL_REG, IN_EEPROM_CTRL_EEWE);
    12c0:	ac e3       	ldi	r26, 0x3C	; 60
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	ec e3       	ldi	r30, 0x3C	; 60
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	82 60       	ori	r24, 0x02	; 2
    12cc:	8c 93       	st	X, r24

    SREG_REG = sreg;
    12ce:	ef e5       	ldi	r30, 0x5F	; 95
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
    12d4:	80 83       	st	Z, r24
    return EEPROM_OK;
    12d6:	19 86       	std	Y+9, r1	; 0x09
    12d8:	89 85       	ldd	r24, Y+9	; 0x09
}
    12da:	29 96       	adiw	r28, 0x09	; 9
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <EEPROM_SaveTemp>:

EEPROM_Status_t EEPROM_SaveTemp(u8 temp)
{
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	62 97       	sbiw	r28, 0x12	; 18
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	89 8b       	std	Y+17, r24	; 0x11
    if(temp < 35 || temp > 75) return EEPROM_INVALID_DATA;
    1302:	89 89       	ldd	r24, Y+17	; 0x11
    1304:	83 32       	cpi	r24, 0x23	; 35
    1306:	18 f0       	brcs	.+6      	; 0x130e <EEPROM_SaveTemp+0x22>
    1308:	89 89       	ldd	r24, Y+17	; 0x11
    130a:	8c 34       	cpi	r24, 0x4C	; 76
    130c:	18 f0       	brcs	.+6      	; 0x1314 <EEPROM_SaveTemp+0x28>
    130e:	84 e0       	ldi	r24, 0x04	; 4
    1310:	8a 8b       	std	Y+18, r24	; 0x12
    1312:	8d c0       	rjmp	.+282    	; 0x142e <EEPROM_SaveTemp+0x142>

    EEPROM_Status_t status = IN_EEPROM_voidWriteDataByte(EEPROM_TEMP_ADDR, temp);
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	69 89       	ldd	r22, Y+17	; 0x11
    131a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <IN_EEPROM_voidWriteDataByte>
    131e:	8f 87       	std	Y+15, r24	; 0x0f

    u8 verify;
    if(status == EEPROM_OK) {
    1320:	8f 85       	ldd	r24, Y+15	; 0x0f
    1322:	88 23       	and	r24, r24
    1324:	09 f0       	breq	.+2      	; 0x1328 <EEPROM_SaveTemp+0x3c>
    1326:	81 c0       	rjmp	.+258    	; 0x142a <EEPROM_SaveTemp+0x13e>
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a0 e2       	ldi	r26, 0x20	; 32
    132e:	b1 e4       	ldi	r27, 0x41	; 65
    1330:	8b 87       	std	Y+11, r24	; 0x0b
    1332:	9c 87       	std	Y+12, r25	; 0x0c
    1334:	ad 87       	std	Y+13, r26	; 0x0d
    1336:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1338:	6b 85       	ldd	r22, Y+11	; 0x0b
    133a:	7c 85       	ldd	r23, Y+12	; 0x0c
    133c:	8d 85       	ldd	r24, Y+13	; 0x0d
    133e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	4a e7       	ldi	r20, 0x7A	; 122
    1346:	55 e4       	ldi	r21, 0x45	; 69
    1348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	8f 83       	std	Y+7, r24	; 0x07
    1352:	98 87       	std	Y+8, r25	; 0x08
    1354:	a9 87       	std	Y+9, r26	; 0x09
    1356:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1358:	6f 81       	ldd	r22, Y+7	; 0x07
    135a:	78 85       	ldd	r23, Y+8	; 0x08
    135c:	89 85       	ldd	r24, Y+9	; 0x09
    135e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e8       	ldi	r20, 0x80	; 128
    1366:	5f e3       	ldi	r21, 0x3F	; 63
    1368:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    136c:	88 23       	and	r24, r24
    136e:	2c f4       	brge	.+10     	; 0x137a <EEPROM_SaveTemp+0x8e>
		__ticks = 1;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	9e 83       	std	Y+6, r25	; 0x06
    1376:	8d 83       	std	Y+5, r24	; 0x05
    1378:	3f c0       	rjmp	.+126    	; 0x13f8 <EEPROM_SaveTemp+0x10c>
	else if (__tmp > 65535)
    137a:	6f 81       	ldd	r22, Y+7	; 0x07
    137c:	78 85       	ldd	r23, Y+8	; 0x08
    137e:	89 85       	ldd	r24, Y+9	; 0x09
    1380:	9a 85       	ldd	r25, Y+10	; 0x0a
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	3f ef       	ldi	r19, 0xFF	; 255
    1386:	4f e7       	ldi	r20, 0x7F	; 127
    1388:	57 e4       	ldi	r21, 0x47	; 71
    138a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    138e:	18 16       	cp	r1, r24
    1390:	4c f5       	brge	.+82     	; 0x13e4 <EEPROM_SaveTemp+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1392:	6b 85       	ldd	r22, Y+11	; 0x0b
    1394:	7c 85       	ldd	r23, Y+12	; 0x0c
    1396:	8d 85       	ldd	r24, Y+13	; 0x0d
    1398:	9e 85       	ldd	r25, Y+14	; 0x0e
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e2       	ldi	r20, 0x20	; 32
    13a0:	51 e4       	ldi	r21, 0x41	; 65
    13a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	bc 01       	movw	r22, r24
    13ac:	cd 01       	movw	r24, r26
    13ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	9e 83       	std	Y+6, r25	; 0x06
    13b8:	8d 83       	std	Y+5, r24	; 0x05
    13ba:	0f c0       	rjmp	.+30     	; 0x13da <EEPROM_SaveTemp+0xee>
    13bc:	80 e9       	ldi	r24, 0x90	; 144
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	9c 83       	std	Y+4, r25	; 0x04
    13c2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <EEPROM_SaveTemp+0xdc>
    13cc:	9c 83       	std	Y+4, r25	; 0x04
    13ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d0:	8d 81       	ldd	r24, Y+5	; 0x05
    13d2:	9e 81       	ldd	r25, Y+6	; 0x06
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	9e 83       	std	Y+6, r25	; 0x06
    13d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	69 f7       	brne	.-38     	; 0x13bc <EEPROM_SaveTemp+0xd0>
    13e2:	14 c0       	rjmp	.+40     	; 0x140c <EEPROM_SaveTemp+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e4:	6f 81       	ldd	r22, Y+7	; 0x07
    13e6:	78 85       	ldd	r23, Y+8	; 0x08
    13e8:	89 85       	ldd	r24, Y+9	; 0x09
    13ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	9e 83       	std	Y+6, r25	; 0x06
    13f6:	8d 83       	std	Y+5, r24	; 0x05
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	9a 83       	std	Y+2, r25	; 0x02
    13fe:	89 83       	std	Y+1, r24	; 0x01
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	9a 81       	ldd	r25, Y+2	; 0x02
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <EEPROM_SaveTemp+0x118>
    1408:	9a 83       	std	Y+2, r25	; 0x02
    140a:	89 83       	std	Y+1, r24	; 0x01
    	_delay_ms(10);
        IN_EEPROM_voidReadDataByte(EEPROM_TEMP_ADDR, &verify);
    140c:	9e 01       	movw	r18, r28
    140e:	20 5f       	subi	r18, 0xF0	; 240
    1410:	3f 4f       	sbci	r19, 0xFF	; 255
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	b9 01       	movw	r22, r18
    1418:	0e 94 b5 08 	call	0x116a	; 0x116a <IN_EEPROM_voidReadDataByte>
        if(verify != temp) {
    141c:	98 89       	ldd	r25, Y+16	; 0x10
    141e:	89 89       	ldd	r24, Y+17	; 0x11
    1420:	98 17       	cp	r25, r24
    1422:	19 f0       	breq	.+6      	; 0x142a <EEPROM_SaveTemp+0x13e>
            return EEPROM_WRITE_FAILED;
    1424:	85 e0       	ldi	r24, 0x05	; 5
    1426:	8a 8b       	std	Y+18, r24	; 0x12
    1428:	02 c0       	rjmp	.+4      	; 0x142e <EEPROM_SaveTemp+0x142>
        }
    }

    return status;
    142a:	8f 85       	ldd	r24, Y+15	; 0x0f
    142c:	8a 8b       	std	Y+18, r24	; 0x12
    142e:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1430:	62 96       	adiw	r28, 0x12	; 18
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <EEPROM_LoadTemp>:

EEPROM_Status_t EEPROM_LoadTemp(u8* temp)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	00 d0       	rcall	.+0      	; 0x1448 <EEPROM_LoadTemp+0x6>
    1448:	0f 92       	push	r0
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	9a 83       	std	Y+2, r25	; 0x02
    1450:	89 83       	std	Y+1, r24	; 0x01
    if(temp == NULL) return EEPROM_INVALID_DATA;
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	9a 81       	ldd	r25, Y+2	; 0x02
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	19 f4       	brne	.+6      	; 0x1460 <EEPROM_LoadTemp+0x1e>
    145a:	84 e0       	ldi	r24, 0x04	; 4
    145c:	8b 83       	std	Y+3, r24	; 0x03
    145e:	08 c0       	rjmp	.+16     	; 0x1470 <EEPROM_LoadTemp+0x2e>
    return IN_EEPROM_voidReadDataByte(EEPROM_TEMP_ADDR, temp);
    1460:	29 81       	ldd	r18, Y+1	; 0x01
    1462:	3a 81       	ldd	r19, Y+2	; 0x02
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	b9 01       	movw	r22, r18
    146a:	0e 94 b5 08 	call	0x116a	; 0x116a <IN_EEPROM_voidReadDataByte>
    146e:	8b 83       	std	Y+3, r24	; 0x03
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <DIO_voidInit>:
#include "../../Service/Std_type.h"
#include "../../Service/bit_math.h"
#include "../../Service/reg.h"
#include "DIO_int.h"

void DIO_voidInit(void){
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN_2, DIO_PIN_INPUT); // ON/OFF
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	62 e0       	ldi	r22, 0x02	; 2
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	0e 94 87 0a 	call	0x150e	; 0x150e <DIO_voidSetPinDirection>
    DIO_voidSetPinValue(DIO_PORTD, DIO_PIN_2, DIO_PIN_HIGH);
    1490:	83 e0       	ldi	r24, 0x03	; 3
    1492:	62 e0       	ldi	r22, 0x02	; 2
    1494:	41 e0       	ldi	r20, 0x01	; 1
    1496:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>

    DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN_3, DIO_PIN_INPUT); // UP
    149a:	83 e0       	ldi	r24, 0x03	; 3
    149c:	63 e0       	ldi	r22, 0x03	; 3
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	0e 94 87 0a 	call	0x150e	; 0x150e <DIO_voidSetPinDirection>
    DIO_voidSetPinValue(DIO_PORTD, DIO_PIN_3, DIO_PIN_HIGH);
    14a4:	83 e0       	ldi	r24, 0x03	; 3
    14a6:	63 e0       	ldi	r22, 0x03	; 3
    14a8:	41 e0       	ldi	r20, 0x01	; 1
    14aa:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>

    DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN_4, DIO_PIN_INPUT); // DOWN
    14ae:	83 e0       	ldi	r24, 0x03	; 3
    14b0:	64 e0       	ldi	r22, 0x04	; 4
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	0e 94 87 0a 	call	0x150e	; 0x150e <DIO_voidSetPinDirection>
    DIO_voidSetPinValue(DIO_PORTD, DIO_PIN_4, DIO_PIN_HIGH);
    14b8:	83 e0       	ldi	r24, 0x03	; 3
    14ba:	64 e0       	ldi	r22, 0x04	; 4
    14bc:	41 e0       	ldi	r20, 0x01	; 1
    14be:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>

    DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN_0, DIO_PIN_OUTPUT); // Heater
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	41 e0       	ldi	r20, 0x01	; 1
    14c8:	0e 94 87 0a 	call	0x150e	; 0x150e <DIO_voidSetPinDirection>
    DIO_voidSetPinValue(DIO_PORTB, DIO_PIN_0, DIO_PIN_LOW);
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>

    DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN_1, DIO_PIN_OUTPUT); // Cooler
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	61 e0       	ldi	r22, 0x01	; 1
    14da:	41 e0       	ldi	r20, 0x01	; 1
    14dc:	0e 94 87 0a 	call	0x150e	; 0x150e <DIO_voidSetPinDirection>
    DIO_voidSetPinValue(DIO_PORTB, DIO_PIN_1, DIO_PIN_LOW);
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	61 e0       	ldi	r22, 0x01	; 1
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>

    DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN_2, DIO_PIN_OUTPUT); // LED
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	62 e0       	ldi	r22, 0x02	; 2
    14ee:	41 e0       	ldi	r20, 0x01	; 1
    14f0:	0e 94 87 0a 	call	0x150e	; 0x150e <DIO_voidSetPinDirection>
    DIO_voidSetPinValue(DIO_PORTB, DIO_PIN_2, DIO_PIN_LOW);
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	62 e0       	ldi	r22, 0x02	; 2
    14f8:	40 e0       	ldi	r20, 0x00	; 0
    14fa:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>

    DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN_0, DIO_PIN_INPUT); // LM35 input pin
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	40 e0       	ldi	r20, 0x00	; 0
    1504:	0e 94 87 0a 	call	0x150e	; 0x150e <DIO_voidSetPinDirection>
}
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <DIO_voidSetPinDirection>:

void DIO_voidSetPinDirection(u8 Copy_u8port, u8 Copy_u8pin, u8 Copy_u8direction){
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	27 97       	sbiw	r28, 0x07	; 7
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	6a 83       	std	Y+2, r22	; 0x02
    1526:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8pin  <= 7 )
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	88 30       	cpi	r24, 0x08	; 8
    152c:	08 f0       	brcs	.+2      	; 0x1530 <DIO_voidSetPinDirection+0x22>
    152e:	ea c0       	rjmp	.+468    	; 0x1704 <DIO_voidSetPinDirection+0x1f6>
	{
		if(Copy_u8direction == DIO_PIN_INPUT)
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	88 23       	and	r24, r24
    1534:	09 f0       	breq	.+2      	; 0x1538 <DIO_voidSetPinDirection+0x2a>
    1536:	74 c0       	rjmp	.+232    	; 0x1620 <DIO_voidSetPinDirection+0x112>
		{
			switch(Copy_u8port)
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	3f 83       	std	Y+7, r19	; 0x07
    1540:	2e 83       	std	Y+6, r18	; 0x06
    1542:	8e 81       	ldd	r24, Y+6	; 0x06
    1544:	9f 81       	ldd	r25, Y+7	; 0x07
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	91 05       	cpc	r25, r1
    154a:	59 f1       	breq	.+86     	; 0x15a2 <DIO_voidSetPinDirection+0x94>
    154c:	2e 81       	ldd	r18, Y+6	; 0x06
    154e:	3f 81       	ldd	r19, Y+7	; 0x07
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	2c f4       	brge	.+10     	; 0x1560 <DIO_voidSetPinDirection+0x52>
    1556:	8e 81       	ldd	r24, Y+6	; 0x06
    1558:	9f 81       	ldd	r25, Y+7	; 0x07
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	69 f0       	breq	.+26     	; 0x1578 <DIO_voidSetPinDirection+0x6a>
    155e:	d2 c0       	rjmp	.+420    	; 0x1704 <DIO_voidSetPinDirection+0x1f6>
    1560:	2e 81       	ldd	r18, Y+6	; 0x06
    1562:	3f 81       	ldd	r19, Y+7	; 0x07
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	89 f1       	breq	.+98     	; 0x15cc <DIO_voidSetPinDirection+0xbe>
    156a:	8e 81       	ldd	r24, Y+6	; 0x06
    156c:	9f 81       	ldd	r25, Y+7	; 0x07
    156e:	83 30       	cpi	r24, 0x03	; 3
    1570:	91 05       	cpc	r25, r1
    1572:	09 f4       	brne	.+2      	; 0x1576 <DIO_voidSetPinDirection+0x68>
    1574:	40 c0       	rjmp	.+128    	; 0x15f6 <DIO_voidSetPinDirection+0xe8>
    1576:	c6 c0       	rjmp	.+396    	; 0x1704 <DIO_voidSetPinDirection+0x1f6>
			{
			case DIO_PORTA:CLR_BIT(DIO_DDRA_REG,Copy_u8pin); break;
    1578:	aa e3       	ldi	r26, 0x3A	; 58
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	ea e3       	ldi	r30, 0x3A	; 58
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <DIO_voidSetPinDirection+0x88>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <DIO_voidSetPinDirection+0x84>
    159a:	80 95       	com	r24
    159c:	84 23       	and	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	b1 c0       	rjmp	.+354    	; 0x1704 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTB:CLR_BIT(DIO_DDRB_REG,Copy_u8pin); break;
    15a2:	a7 e3       	ldi	r26, 0x37	; 55
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e7 e3       	ldi	r30, 0x37	; 55
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_voidSetPinDirection+0xb2>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_voidSetPinDirection+0xae>
    15c4:	80 95       	com	r24
    15c6:	84 23       	and	r24, r20
    15c8:	8c 93       	st	X, r24
    15ca:	9c c0       	rjmp	.+312    	; 0x1704 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTC:CLR_BIT(DIO_DDRC_REG,Copy_u8pin); break;
    15cc:	a4 e3       	ldi	r26, 0x34	; 52
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e4 e3       	ldi	r30, 0x34	; 52
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <DIO_voidSetPinDirection+0xdc>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <DIO_voidSetPinDirection+0xd8>
    15ee:	80 95       	com	r24
    15f0:	84 23       	and	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	87 c0       	rjmp	.+270    	; 0x1704 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTD:CLR_BIT(DIO_DDRD_REG,Copy_u8pin); break;
    15f6:	a1 e3       	ldi	r26, 0x31	; 49
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e1 e3       	ldi	r30, 0x31	; 49
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_voidSetPinDirection+0x106>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_voidSetPinDirection+0x102>
    1618:	80 95       	com	r24
    161a:	84 23       	and	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	72 c0       	rjmp	.+228    	; 0x1704 <DIO_voidSetPinDirection+0x1f6>
			default:break ;
			}
		}
		else if(Copy_u8direction == DIO_PIN_OUTPUT)
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	09 f0       	breq	.+2      	; 0x1628 <DIO_voidSetPinDirection+0x11a>
    1626:	6e c0       	rjmp	.+220    	; 0x1704 <DIO_voidSetPinDirection+0x1f6>
		{
			switch(Copy_u8port)
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	3d 83       	std	Y+5, r19	; 0x05
    1630:	2c 83       	std	Y+4, r18	; 0x04
    1632:	8c 81       	ldd	r24, Y+4	; 0x04
    1634:	9d 81       	ldd	r25, Y+5	; 0x05
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	91 05       	cpc	r25, r1
    163a:	49 f1       	breq	.+82     	; 0x168e <DIO_voidSetPinDirection+0x180>
    163c:	2c 81       	ldd	r18, Y+4	; 0x04
    163e:	3d 81       	ldd	r19, Y+5	; 0x05
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	2c f4       	brge	.+10     	; 0x1650 <DIO_voidSetPinDirection+0x142>
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	9d 81       	ldd	r25, Y+5	; 0x05
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	61 f0       	breq	.+24     	; 0x1666 <DIO_voidSetPinDirection+0x158>
    164e:	5a c0       	rjmp	.+180    	; 0x1704 <DIO_voidSetPinDirection+0x1f6>
    1650:	2c 81       	ldd	r18, Y+4	; 0x04
    1652:	3d 81       	ldd	r19, Y+5	; 0x05
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	71 f1       	breq	.+92     	; 0x16b6 <DIO_voidSetPinDirection+0x1a8>
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	9d 81       	ldd	r25, Y+5	; 0x05
    165e:	83 30       	cpi	r24, 0x03	; 3
    1660:	91 05       	cpc	r25, r1
    1662:	e9 f1       	breq	.+122    	; 0x16de <DIO_voidSetPinDirection+0x1d0>
    1664:	4f c0       	rjmp	.+158    	; 0x1704 <DIO_voidSetPinDirection+0x1f6>
			{
			case DIO_PORTA:SET_BIT(DIO_DDRA_REG,Copy_u8pin); break;
    1666:	aa e3       	ldi	r26, 0x3A	; 58
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	ea e3       	ldi	r30, 0x3A	; 58
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	48 2f       	mov	r20, r24
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 2e       	mov	r0, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <DIO_voidSetPinDirection+0x176>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	0a 94       	dec	r0
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <DIO_voidSetPinDirection+0x172>
    1688:	84 2b       	or	r24, r20
    168a:	8c 93       	st	X, r24
    168c:	3b c0       	rjmp	.+118    	; 0x1704 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTB:SET_BIT(DIO_DDRB_REG,Copy_u8pin); break;
    168e:	a7 e3       	ldi	r26, 0x37	; 55
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e7 e3       	ldi	r30, 0x37	; 55
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 2e       	mov	r0, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_voidSetPinDirection+0x19e>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <DIO_voidSetPinDirection+0x19a>
    16b0:	84 2b       	or	r24, r20
    16b2:	8c 93       	st	X, r24
    16b4:	27 c0       	rjmp	.+78     	; 0x1704 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTC:SET_BIT(DIO_DDRC_REG,Copy_u8pin); break;
    16b6:	a4 e3       	ldi	r26, 0x34	; 52
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	e4 e3       	ldi	r30, 0x34	; 52
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	48 2f       	mov	r20, r24
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	02 2e       	mov	r0, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <DIO_voidSetPinDirection+0x1c6>
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	0a 94       	dec	r0
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <DIO_voidSetPinDirection+0x1c2>
    16d8:	84 2b       	or	r24, r20
    16da:	8c 93       	st	X, r24
    16dc:	13 c0       	rjmp	.+38     	; 0x1704 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTD:SET_BIT(DIO_DDRD_REG,Copy_u8pin); break;
    16de:	a1 e3       	ldi	r26, 0x31	; 49
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e1 e3       	ldi	r30, 0x31	; 49
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	48 2f       	mov	r20, r24
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	02 2e       	mov	r0, r18
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <DIO_voidSetPinDirection+0x1ee>
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	0a 94       	dec	r0
    16fe:	e2 f7       	brpl	.-8      	; 0x16f8 <DIO_voidSetPinDirection+0x1ea>
    1700:	84 2b       	or	r24, r20
    1702:	8c 93       	st	X, r24
		}
		else {
		}
	}else {
	}
}
    1704:	27 96       	adiw	r28, 0x07	; 7
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue    (u8 Copy_u8port, u8 Copy_u8pin, u8 Copy_u8value){
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	27 97       	sbiw	r28, 0x07	; 7
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	6a 83       	std	Y+2, r22	; 0x02
    172e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8pin  <= 7 )
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	88 30       	cpi	r24, 0x08	; 8
    1734:	08 f0       	brcs	.+2      	; 0x1738 <DIO_voidSetPinValue+0x22>
    1736:	ea c0       	rjmp	.+468    	; 0x190c <DIO_voidSetPinValue+0x1f6>
	{
		if(Copy_u8value == DIO_PIN_LOW)
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	88 23       	and	r24, r24
    173c:	09 f0       	breq	.+2      	; 0x1740 <DIO_voidSetPinValue+0x2a>
    173e:	74 c0       	rjmp	.+232    	; 0x1828 <DIO_voidSetPinValue+0x112>
		{
			switch(Copy_u8port)
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	3f 83       	std	Y+7, r19	; 0x07
    1748:	2e 83       	std	Y+6, r18	; 0x06
    174a:	8e 81       	ldd	r24, Y+6	; 0x06
    174c:	9f 81       	ldd	r25, Y+7	; 0x07
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	91 05       	cpc	r25, r1
    1752:	59 f1       	breq	.+86     	; 0x17aa <DIO_voidSetPinValue+0x94>
    1754:	2e 81       	ldd	r18, Y+6	; 0x06
    1756:	3f 81       	ldd	r19, Y+7	; 0x07
    1758:	22 30       	cpi	r18, 0x02	; 2
    175a:	31 05       	cpc	r19, r1
    175c:	2c f4       	brge	.+10     	; 0x1768 <DIO_voidSetPinValue+0x52>
    175e:	8e 81       	ldd	r24, Y+6	; 0x06
    1760:	9f 81       	ldd	r25, Y+7	; 0x07
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	69 f0       	breq	.+26     	; 0x1780 <DIO_voidSetPinValue+0x6a>
    1766:	d2 c0       	rjmp	.+420    	; 0x190c <DIO_voidSetPinValue+0x1f6>
    1768:	2e 81       	ldd	r18, Y+6	; 0x06
    176a:	3f 81       	ldd	r19, Y+7	; 0x07
    176c:	22 30       	cpi	r18, 0x02	; 2
    176e:	31 05       	cpc	r19, r1
    1770:	89 f1       	breq	.+98     	; 0x17d4 <DIO_voidSetPinValue+0xbe>
    1772:	8e 81       	ldd	r24, Y+6	; 0x06
    1774:	9f 81       	ldd	r25, Y+7	; 0x07
    1776:	83 30       	cpi	r24, 0x03	; 3
    1778:	91 05       	cpc	r25, r1
    177a:	09 f4       	brne	.+2      	; 0x177e <DIO_voidSetPinValue+0x68>
    177c:	40 c0       	rjmp	.+128    	; 0x17fe <DIO_voidSetPinValue+0xe8>
    177e:	c6 c0       	rjmp	.+396    	; 0x190c <DIO_voidSetPinValue+0x1f6>
			{
			case DIO_PORTA:CLR_BIT(DIO_PORTA_REG,Copy_u8pin); break;
    1780:	ab e3       	ldi	r26, 0x3B	; 59
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	eb e3       	ldi	r30, 0x3B	; 59
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	48 2f       	mov	r20, r24
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	02 2e       	mov	r0, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <DIO_voidSetPinValue+0x88>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <DIO_voidSetPinValue+0x84>
    17a2:	80 95       	com	r24
    17a4:	84 23       	and	r24, r20
    17a6:	8c 93       	st	X, r24
    17a8:	b1 c0       	rjmp	.+354    	; 0x190c <DIO_voidSetPinValue+0x1f6>
			case DIO_PORTB:CLR_BIT(DIO_PORTB_REG,Copy_u8pin); break;
    17aa:	a8 e3       	ldi	r26, 0x38	; 56
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e8 e3       	ldi	r30, 0x38	; 56
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <DIO_voidSetPinValue+0xb2>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <DIO_voidSetPinValue+0xae>
    17cc:	80 95       	com	r24
    17ce:	84 23       	and	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	9c c0       	rjmp	.+312    	; 0x190c <DIO_voidSetPinValue+0x1f6>
			case DIO_PORTC:CLR_BIT(DIO_PORTC_REG,Copy_u8pin); break;
    17d4:	a5 e3       	ldi	r26, 0x35	; 53
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e5 e3       	ldi	r30, 0x35	; 53
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <DIO_voidSetPinValue+0xdc>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <DIO_voidSetPinValue+0xd8>
    17f6:	80 95       	com	r24
    17f8:	84 23       	and	r24, r20
    17fa:	8c 93       	st	X, r24
    17fc:	87 c0       	rjmp	.+270    	; 0x190c <DIO_voidSetPinValue+0x1f6>
			case DIO_PORTD:CLR_BIT(DIO_PORTD_REG,Copy_u8pin); break;
    17fe:	a2 e3       	ldi	r26, 0x32	; 50
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e2 e3       	ldi	r30, 0x32	; 50
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <DIO_voidSetPinValue+0x106>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <DIO_voidSetPinValue+0x102>
    1820:	80 95       	com	r24
    1822:	84 23       	and	r24, r20
    1824:	8c 93       	st	X, r24
    1826:	72 c0       	rjmp	.+228    	; 0x190c <DIO_voidSetPinValue+0x1f6>
			default:break ;
			//return error
			}
		}
		else if(Copy_u8value == DIO_PIN_HIGH)
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	81 30       	cpi	r24, 0x01	; 1
    182c:	09 f0       	breq	.+2      	; 0x1830 <DIO_voidSetPinValue+0x11a>
    182e:	6e c0       	rjmp	.+220    	; 0x190c <DIO_voidSetPinValue+0x1f6>
		{
			//check port
			switch(Copy_u8port)
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	3d 83       	std	Y+5, r19	; 0x05
    1838:	2c 83       	std	Y+4, r18	; 0x04
    183a:	8c 81       	ldd	r24, Y+4	; 0x04
    183c:	9d 81       	ldd	r25, Y+5	; 0x05
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	91 05       	cpc	r25, r1
    1842:	49 f1       	breq	.+82     	; 0x1896 <DIO_voidSetPinValue+0x180>
    1844:	2c 81       	ldd	r18, Y+4	; 0x04
    1846:	3d 81       	ldd	r19, Y+5	; 0x05
    1848:	22 30       	cpi	r18, 0x02	; 2
    184a:	31 05       	cpc	r19, r1
    184c:	2c f4       	brge	.+10     	; 0x1858 <DIO_voidSetPinValue+0x142>
    184e:	8c 81       	ldd	r24, Y+4	; 0x04
    1850:	9d 81       	ldd	r25, Y+5	; 0x05
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	61 f0       	breq	.+24     	; 0x186e <DIO_voidSetPinValue+0x158>
    1856:	5a c0       	rjmp	.+180    	; 0x190c <DIO_voidSetPinValue+0x1f6>
    1858:	2c 81       	ldd	r18, Y+4	; 0x04
    185a:	3d 81       	ldd	r19, Y+5	; 0x05
    185c:	22 30       	cpi	r18, 0x02	; 2
    185e:	31 05       	cpc	r19, r1
    1860:	71 f1       	breq	.+92     	; 0x18be <DIO_voidSetPinValue+0x1a8>
    1862:	8c 81       	ldd	r24, Y+4	; 0x04
    1864:	9d 81       	ldd	r25, Y+5	; 0x05
    1866:	83 30       	cpi	r24, 0x03	; 3
    1868:	91 05       	cpc	r25, r1
    186a:	e9 f1       	breq	.+122    	; 0x18e6 <DIO_voidSetPinValue+0x1d0>
    186c:	4f c0       	rjmp	.+158    	; 0x190c <DIO_voidSetPinValue+0x1f6>
			{
			case DIO_PORTA:SET_BIT(DIO_PORTA_REG,Copy_u8pin); break;
    186e:	ab e3       	ldi	r26, 0x3B	; 59
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	eb e3       	ldi	r30, 0x3B	; 59
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	48 2f       	mov	r20, r24
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <DIO_voidSetPinValue+0x176>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <DIO_voidSetPinValue+0x172>
    1890:	84 2b       	or	r24, r20
    1892:	8c 93       	st	X, r24
    1894:	3b c0       	rjmp	.+118    	; 0x190c <DIO_voidSetPinValue+0x1f6>
			case DIO_PORTB:SET_BIT(DIO_PORTB_REG,Copy_u8pin); break;
    1896:	a8 e3       	ldi	r26, 0x38	; 56
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e8 e3       	ldi	r30, 0x38	; 56
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	48 2f       	mov	r20, r24
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	02 2e       	mov	r0, r18
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <DIO_voidSetPinValue+0x19e>
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	0a 94       	dec	r0
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <DIO_voidSetPinValue+0x19a>
    18b8:	84 2b       	or	r24, r20
    18ba:	8c 93       	st	X, r24
    18bc:	27 c0       	rjmp	.+78     	; 0x190c <DIO_voidSetPinValue+0x1f6>
			case DIO_PORTC:SET_BIT(DIO_PORTC_REG,Copy_u8pin); break;
    18be:	a5 e3       	ldi	r26, 0x35	; 53
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e5 e3       	ldi	r30, 0x35	; 53
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_voidSetPinValue+0x1c6>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_voidSetPinValue+0x1c2>
    18e0:	84 2b       	or	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	13 c0       	rjmp	.+38     	; 0x190c <DIO_voidSetPinValue+0x1f6>
			case DIO_PORTD:SET_BIT(DIO_PORTD_REG,Copy_u8pin); break;
    18e6:	a2 e3       	ldi	r26, 0x32	; 50
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e2 e3       	ldi	r30, 0x32	; 50
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <DIO_voidSetPinValue+0x1ee>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <DIO_voidSetPinValue+0x1ea>
    1908:	84 2b       	or	r24, r20
    190a:	8c 93       	st	X, r24
			//return error
		}
	}else {

	}
}
    190c:	27 96       	adiw	r28, 0x07	; 7
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <DIO_u8GetPinValue>:

u8   DIO_u8GetPinValue      (u8 Copy_u8port, u8 Copy_u8pin){
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <DIO_u8GetPinValue+0x6>
    1924:	00 d0       	rcall	.+0      	; 0x1926 <DIO_u8GetPinValue+0x8>
    1926:	0f 92       	push	r0
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	8a 83       	std	Y+2, r24	; 0x02
    192e:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8Val =0 ;
    1930:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	3d 83       	std	Y+5, r19	; 0x05
    193a:	2c 83       	std	Y+4, r18	; 0x04
    193c:	4c 81       	ldd	r20, Y+4	; 0x04
    193e:	5d 81       	ldd	r21, Y+5	; 0x05
    1940:	41 30       	cpi	r20, 0x01	; 1
    1942:	51 05       	cpc	r21, r1
    1944:	41 f1       	breq	.+80     	; 0x1996 <DIO_u8GetPinValue+0x78>
    1946:	8c 81       	ldd	r24, Y+4	; 0x04
    1948:	9d 81       	ldd	r25, Y+5	; 0x05
    194a:	82 30       	cpi	r24, 0x02	; 2
    194c:	91 05       	cpc	r25, r1
    194e:	34 f4       	brge	.+12     	; 0x195c <DIO_u8GetPinValue+0x3e>
    1950:	2c 81       	ldd	r18, Y+4	; 0x04
    1952:	3d 81       	ldd	r19, Y+5	; 0x05
    1954:	21 15       	cp	r18, r1
    1956:	31 05       	cpc	r19, r1
    1958:	61 f0       	breq	.+24     	; 0x1972 <DIO_u8GetPinValue+0x54>
    195a:	52 c0       	rjmp	.+164    	; 0x1a00 <DIO_u8GetPinValue+0xe2>
    195c:	4c 81       	ldd	r20, Y+4	; 0x04
    195e:	5d 81       	ldd	r21, Y+5	; 0x05
    1960:	42 30       	cpi	r20, 0x02	; 2
    1962:	51 05       	cpc	r21, r1
    1964:	51 f1       	breq	.+84     	; 0x19ba <DIO_u8GetPinValue+0x9c>
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	9d 81       	ldd	r25, Y+5	; 0x05
    196a:	83 30       	cpi	r24, 0x03	; 3
    196c:	91 05       	cpc	r25, r1
    196e:	b9 f1       	breq	.+110    	; 0x19de <DIO_u8GetPinValue+0xc0>
    1970:	47 c0       	rjmp	.+142    	; 0x1a00 <DIO_u8GetPinValue+0xe2>
	{
	case DIO_PORTA : Local_u8Val = GET_BIT(DIO_PINA_REG,Copy_u8pin); break ;
    1972:	e9 e3       	ldi	r30, 0x39	; 57
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a9 01       	movw	r20, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <DIO_u8GetPinValue+0x6c>
    1986:	55 95       	asr	r21
    1988:	47 95       	ror	r20
    198a:	8a 95       	dec	r24
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <DIO_u8GetPinValue+0x68>
    198e:	ca 01       	movw	r24, r20
    1990:	81 70       	andi	r24, 0x01	; 1
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	35 c0       	rjmp	.+106    	; 0x1a00 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTB : Local_u8Val = GET_BIT(DIO_PINB_REG,Copy_u8pin); break ;
    1996:	e6 e3       	ldi	r30, 0x36	; 54
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a9 01       	movw	r20, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <DIO_u8GetPinValue+0x90>
    19aa:	55 95       	asr	r21
    19ac:	47 95       	ror	r20
    19ae:	8a 95       	dec	r24
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <DIO_u8GetPinValue+0x8c>
    19b2:	ca 01       	movw	r24, r20
    19b4:	81 70       	andi	r24, 0x01	; 1
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	23 c0       	rjmp	.+70     	; 0x1a00 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTC : Local_u8Val = GET_BIT(DIO_PINC_REG,Copy_u8pin); break ;
    19ba:	e3 e3       	ldi	r30, 0x33	; 51
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	88 2f       	mov	r24, r24
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	a9 01       	movw	r20, r18
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <DIO_u8GetPinValue+0xb4>
    19ce:	55 95       	asr	r21
    19d0:	47 95       	ror	r20
    19d2:	8a 95       	dec	r24
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <DIO_u8GetPinValue+0xb0>
    19d6:	ca 01       	movw	r24, r20
    19d8:	81 70       	andi	r24, 0x01	; 1
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	11 c0       	rjmp	.+34     	; 0x1a00 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTD : Local_u8Val = GET_BIT(DIO_PIND_REG,Copy_u8pin); break ;
    19de:	e0 e3       	ldi	r30, 0x30	; 48
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	88 2f       	mov	r24, r24
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	a9 01       	movw	r20, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <DIO_u8GetPinValue+0xd8>
    19f2:	55 95       	asr	r21
    19f4:	47 95       	ror	r20
    19f6:	8a 95       	dec	r24
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <DIO_u8GetPinValue+0xd4>
    19fa:	ca 01       	movw	r24, r20
    19fc:	81 70       	andi	r24, 0x01	; 1
    19fe:	89 83       	std	Y+1, r24	; 0x01
	default 	   : /* error */ break ;

	}
	return Local_u8Val;
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8port,  u8 Copy_u8direction){
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <DIO_voidSetPortDirection+0x6>
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <DIO_voidSetPortDirection+0x8>
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	89 83       	std	Y+1, r24	; 0x01
    1a20:	6a 83       	std	Y+2, r22	; 0x02
	//	PA p 11111111 01010101 00000000
	switch(Copy_u8port)
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	3c 83       	std	Y+4, r19	; 0x04
    1a2a:	2b 83       	std	Y+3, r18	; 0x03
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a30:	81 30       	cpi	r24, 0x01	; 1
    1a32:	91 05       	cpc	r25, r1
    1a34:	d1 f0       	breq	.+52     	; 0x1a6a <DIO_voidSetPortDirection+0x58>
    1a36:	2b 81       	ldd	r18, Y+3	; 0x03
    1a38:	3c 81       	ldd	r19, Y+4	; 0x04
    1a3a:	22 30       	cpi	r18, 0x02	; 2
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	2c f4       	brge	.+10     	; 0x1a4a <DIO_voidSetPortDirection+0x38>
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	61 f0       	breq	.+24     	; 0x1a60 <DIO_voidSetPortDirection+0x4e>
    1a48:	1e c0       	rjmp	.+60     	; 0x1a86 <DIO_voidSetPortDirection+0x74>
    1a4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4e:	22 30       	cpi	r18, 0x02	; 2
    1a50:	31 05       	cpc	r19, r1
    1a52:	81 f0       	breq	.+32     	; 0x1a74 <DIO_voidSetPortDirection+0x62>
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	9c 81       	ldd	r25, Y+4	; 0x04
    1a58:	83 30       	cpi	r24, 0x03	; 3
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	81 f0       	breq	.+32     	; 0x1a7e <DIO_voidSetPortDirection+0x6c>
    1a5e:	13 c0       	rjmp	.+38     	; 0x1a86 <DIO_voidSetPortDirection+0x74>
	{
	case DIO_PORTA :DIO_DDRA_REG = Copy_u8direction; break ;
    1a60:	ea e3       	ldi	r30, 0x3A	; 58
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	80 83       	st	Z, r24
    1a68:	0e c0       	rjmp	.+28     	; 0x1a86 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTB :DIO_DDRB_REG = Copy_u8direction; break ;
    1a6a:	e7 e3       	ldi	r30, 0x37	; 55
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	80 83       	st	Z, r24
    1a72:	09 c0       	rjmp	.+18     	; 0x1a86 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTC :DIO_DDRC_REG = Copy_u8direction; break ;
    1a74:	e4 e3       	ldi	r30, 0x34	; 52
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	80 83       	st	Z, r24
    1a7c:	04 c0       	rjmp	.+8      	; 0x1a86 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTD :DIO_DDRD_REG = Copy_u8direction; break ;
    1a7e:	e1 e3       	ldi	r30, 0x31	; 49
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	80 83       	st	Z, r24
	default 	   : /* error */ break ;
	}
}
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue    (u8 Copy_u8port,  u8 Copy_u8value){
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <DIO_voidSetPortValue+0x6>
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <DIO_voidSetPortValue+0x8>
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8port)
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	3c 83       	std	Y+4, r19	; 0x04
    1aac:	2b 83       	std	Y+3, r18	; 0x03
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	91 05       	cpc	r25, r1
    1ab6:	d1 f0       	breq	.+52     	; 0x1aec <DIO_voidSetPortValue+0x58>
    1ab8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aba:	3c 81       	ldd	r19, Y+4	; 0x04
    1abc:	22 30       	cpi	r18, 0x02	; 2
    1abe:	31 05       	cpc	r19, r1
    1ac0:	2c f4       	brge	.+10     	; 0x1acc <DIO_voidSetPortValue+0x38>
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	61 f0       	breq	.+24     	; 0x1ae2 <DIO_voidSetPortValue+0x4e>
    1aca:	1e c0       	rjmp	.+60     	; 0x1b08 <DIO_voidSetPortValue+0x74>
    1acc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ace:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad0:	22 30       	cpi	r18, 0x02	; 2
    1ad2:	31 05       	cpc	r19, r1
    1ad4:	81 f0       	breq	.+32     	; 0x1af6 <DIO_voidSetPortValue+0x62>
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	83 30       	cpi	r24, 0x03	; 3
    1adc:	91 05       	cpc	r25, r1
    1ade:	81 f0       	breq	.+32     	; 0x1b00 <DIO_voidSetPortValue+0x6c>
    1ae0:	13 c0       	rjmp	.+38     	; 0x1b08 <DIO_voidSetPortValue+0x74>
	{
	case DIO_PORTA :DIO_PORTA_REG = Copy_u8value ; break;
    1ae2:	eb e3       	ldi	r30, 0x3B	; 59
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	80 83       	st	Z, r24
    1aea:	0e c0       	rjmp	.+28     	; 0x1b08 <DIO_voidSetPortValue+0x74>
	case DIO_PORTB :DIO_PORTB_REG = Copy_u8value ; break;
    1aec:	e8 e3       	ldi	r30, 0x38	; 56
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	80 83       	st	Z, r24
    1af4:	09 c0       	rjmp	.+18     	; 0x1b08 <DIO_voidSetPortValue+0x74>
	case DIO_PORTC :DIO_PORTC_REG = Copy_u8value ; break;
    1af6:	e5 e3       	ldi	r30, 0x35	; 53
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	80 83       	st	Z, r24
    1afe:	04 c0       	rjmp	.+8      	; 0x1b08 <DIO_voidSetPortValue+0x74>
	case DIO_PORTD :DIO_PORTD_REG = Copy_u8value ; break;
    1b00:	e2 e3       	ldi	r30, 0x32	; 50
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	80 83       	st	Z, r24
	default 	   : /* error */ break ;
	}
}
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <DIO_u8GetPortValue>:

u8   DIO_u8GetPortValue      (u8 Copy_u8port){
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <DIO_u8GetPortValue+0x6>
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <DIO_u8GetPortValue+0x8>
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Val =0 ;
    1b24:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8port)
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	3c 83       	std	Y+4, r19	; 0x04
    1b2e:	2b 83       	std	Y+3, r18	; 0x03
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	91 05       	cpc	r25, r1
    1b38:	d1 f0       	breq	.+52     	; 0x1b6e <DIO_u8GetPortValue+0x58>
    1b3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3e:	22 30       	cpi	r18, 0x02	; 2
    1b40:	31 05       	cpc	r19, r1
    1b42:	2c f4       	brge	.+10     	; 0x1b4e <DIO_u8GetPortValue+0x38>
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	61 f0       	breq	.+24     	; 0x1b64 <DIO_u8GetPortValue+0x4e>
    1b4c:	1e c0       	rjmp	.+60     	; 0x1b8a <DIO_u8GetPortValue+0x74>
    1b4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b50:	3c 81       	ldd	r19, Y+4	; 0x04
    1b52:	22 30       	cpi	r18, 0x02	; 2
    1b54:	31 05       	cpc	r19, r1
    1b56:	81 f0       	breq	.+32     	; 0x1b78 <DIO_u8GetPortValue+0x62>
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	83 30       	cpi	r24, 0x03	; 3
    1b5e:	91 05       	cpc	r25, r1
    1b60:	81 f0       	breq	.+32     	; 0x1b82 <DIO_u8GetPortValue+0x6c>
    1b62:	13 c0       	rjmp	.+38     	; 0x1b8a <DIO_u8GetPortValue+0x74>
	{
	case DIO_PORTA : Local_u8Val = DIO_PINA_REG; break ;
    1b64:	e9 e3       	ldi	r30, 0x39	; 57
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	0e c0       	rjmp	.+28     	; 0x1b8a <DIO_u8GetPortValue+0x74>
	case DIO_PORTB : Local_u8Val = DIO_PINB_REG; break ;
    1b6e:	e6 e3       	ldi	r30, 0x36	; 54
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	09 c0       	rjmp	.+18     	; 0x1b8a <DIO_u8GetPortValue+0x74>
	case DIO_PORTC : Local_u8Val = DIO_PINC_REG; break ;
    1b78:	e3 e3       	ldi	r30, 0x33	; 51
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	04 c0       	rjmp	.+8      	; 0x1b8a <DIO_u8GetPortValue+0x74>
	case DIO_PORTD : Local_u8Val = DIO_PIND_REG; break ;
    1b82:	e0 e3       	ldi	r30, 0x30	; 48
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	89 83       	std	Y+1, r24	; 0x01
	default 	   : /* error */ break ;
	}
	return Local_u8Val ;
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <DIO_voidEnablePullUp>:

void DIO_voidEnablePullUp(u8 Copy_u8port, u8 Copy_u8pin){
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <DIO_voidEnablePullUp+0x6>
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <DIO_voidEnablePullUp+0x8>
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8port)
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	3c 83       	std	Y+4, r19	; 0x04
    1bb2:	2b 83       	std	Y+3, r18	; 0x03
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	91 05       	cpc	r25, r1
    1bbc:	49 f1       	breq	.+82     	; 0x1c10 <DIO_voidEnablePullUp+0x76>
    1bbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc2:	22 30       	cpi	r18, 0x02	; 2
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <DIO_voidEnablePullUp+0x38>
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	61 f0       	breq	.+24     	; 0x1be8 <DIO_voidEnablePullUp+0x4e>
    1bd0:	5a c0       	rjmp	.+180    	; 0x1c86 <DIO_voidEnablePullUp+0xec>
    1bd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd6:	22 30       	cpi	r18, 0x02	; 2
    1bd8:	31 05       	cpc	r19, r1
    1bda:	71 f1       	breq	.+92     	; 0x1c38 <DIO_voidEnablePullUp+0x9e>
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	83 30       	cpi	r24, 0x03	; 3
    1be2:	91 05       	cpc	r25, r1
    1be4:	e9 f1       	breq	.+122    	; 0x1c60 <DIO_voidEnablePullUp+0xc6>
    1be6:	4f c0       	rjmp	.+158    	; 0x1c86 <DIO_voidEnablePullUp+0xec>
	{
	case DIO_PORTA:SET_BIT(DIO_PORTA_REG,Copy_u8pin); break;
    1be8:	ab e3       	ldi	r26, 0x3B	; 59
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	eb e3       	ldi	r30, 0x3B	; 59
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 2e       	mov	r0, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <DIO_voidEnablePullUp+0x6c>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <DIO_voidEnablePullUp+0x68>
    1c0a:	84 2b       	or	r24, r20
    1c0c:	8c 93       	st	X, r24
    1c0e:	3b c0       	rjmp	.+118    	; 0x1c86 <DIO_voidEnablePullUp+0xec>
	case DIO_PORTB:SET_BIT(DIO_PORTB_REG,Copy_u8pin); break;
    1c10:	a8 e3       	ldi	r26, 0x38	; 56
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e8 e3       	ldi	r30, 0x38	; 56
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	48 2f       	mov	r20, r24
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	02 2e       	mov	r0, r18
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <DIO_voidEnablePullUp+0x94>
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	0a 94       	dec	r0
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <DIO_voidEnablePullUp+0x90>
    1c32:	84 2b       	or	r24, r20
    1c34:	8c 93       	st	X, r24
    1c36:	27 c0       	rjmp	.+78     	; 0x1c86 <DIO_voidEnablePullUp+0xec>
	case DIO_PORTC:SET_BIT(DIO_PORTC_REG,Copy_u8pin); break;
    1c38:	a5 e3       	ldi	r26, 0x35	; 53
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e5 e3       	ldi	r30, 0x35	; 53
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	48 2f       	mov	r20, r24
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	02 2e       	mov	r0, r18
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <DIO_voidEnablePullUp+0xbc>
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	0a 94       	dec	r0
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <DIO_voidEnablePullUp+0xb8>
    1c5a:	84 2b       	or	r24, r20
    1c5c:	8c 93       	st	X, r24
    1c5e:	13 c0       	rjmp	.+38     	; 0x1c86 <DIO_voidEnablePullUp+0xec>
	case DIO_PORTD:SET_BIT(DIO_PORTD_REG,Copy_u8pin); break;
    1c60:	a2 e3       	ldi	r26, 0x32	; 50
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e2 e3       	ldi	r30, 0x32	; 50
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	48 2f       	mov	r20, r24
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	02 2e       	mov	r0, r18
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <DIO_voidEnablePullUp+0xe4>
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	0a 94       	dec	r0
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <DIO_voidEnablePullUp+0xe0>
    1c82:	84 2b       	or	r24, r20
    1c84:	8c 93       	st	X, r24
	default:break ;
	//return error
	}
}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <DIO_voidTogPinValue>:

void DIO_voidTogPinValue    (u8 Copy_u8port, u8 Copy_u8pin){
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <DIO_voidTogPinValue+0x6>
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <DIO_voidTogPinValue+0x8>
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	6a 83       	std	Y+2, r22	; 0x02
	//check if the pin is in the range of 0 to 7
	if(Copy_u8pin  <= 7 )
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	88 30       	cpi	r24, 0x08	; 8
    1ca8:	08 f0       	brcs	.+2      	; 0x1cac <DIO_voidTogPinValue+0x18>
    1caa:	6e c0       	rjmp	.+220    	; 0x1d88 <DIO_voidTogPinValue+0xf4>
	{

			switch(Copy_u8port)
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	3c 83       	std	Y+4, r19	; 0x04
    1cb4:	2b 83       	std	Y+3, r18	; 0x03
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	49 f1       	breq	.+82     	; 0x1d12 <DIO_voidTogPinValue+0x7e>
    1cc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc4:	22 30       	cpi	r18, 0x02	; 2
    1cc6:	31 05       	cpc	r19, r1
    1cc8:	2c f4       	brge	.+10     	; 0x1cd4 <DIO_voidTogPinValue+0x40>
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	61 f0       	breq	.+24     	; 0x1cea <DIO_voidTogPinValue+0x56>
    1cd2:	5a c0       	rjmp	.+180    	; 0x1d88 <DIO_voidTogPinValue+0xf4>
    1cd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd8:	22 30       	cpi	r18, 0x02	; 2
    1cda:	31 05       	cpc	r19, r1
    1cdc:	71 f1       	breq	.+92     	; 0x1d3a <DIO_voidTogPinValue+0xa6>
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	83 30       	cpi	r24, 0x03	; 3
    1ce4:	91 05       	cpc	r25, r1
    1ce6:	e9 f1       	breq	.+122    	; 0x1d62 <DIO_voidTogPinValue+0xce>
    1ce8:	4f c0       	rjmp	.+158    	; 0x1d88 <DIO_voidTogPinValue+0xf4>
			{
			case DIO_PORTA:TOG_BIT(DIO_PORTA_REG,Copy_u8pin); break;
    1cea:	ab e3       	ldi	r26, 0x3B	; 59
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	eb e3       	ldi	r30, 0x3B	; 59
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	48 2f       	mov	r20, r24
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	02 2e       	mov	r0, r18
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <DIO_voidTogPinValue+0x74>
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	0a 94       	dec	r0
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <DIO_voidTogPinValue+0x70>
    1d0c:	84 27       	eor	r24, r20
    1d0e:	8c 93       	st	X, r24
    1d10:	3b c0       	rjmp	.+118    	; 0x1d88 <DIO_voidTogPinValue+0xf4>
			case DIO_PORTB:TOG_BIT(DIO_PORTB_REG,Copy_u8pin); break;
    1d12:	a8 e3       	ldi	r26, 0x38	; 56
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e8 e3       	ldi	r30, 0x38	; 56
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	48 2f       	mov	r20, r24
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	02 2e       	mov	r0, r18
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <DIO_voidTogPinValue+0x9c>
    1d2c:	88 0f       	add	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	0a 94       	dec	r0
    1d32:	e2 f7       	brpl	.-8      	; 0x1d2c <DIO_voidTogPinValue+0x98>
    1d34:	84 27       	eor	r24, r20
    1d36:	8c 93       	st	X, r24
    1d38:	27 c0       	rjmp	.+78     	; 0x1d88 <DIO_voidTogPinValue+0xf4>
			case DIO_PORTC:TOG_BIT(DIO_PORTC_REG,Copy_u8pin); break;
    1d3a:	a5 e3       	ldi	r26, 0x35	; 53
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e5 e3       	ldi	r30, 0x35	; 53
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	48 2f       	mov	r20, r24
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	02 2e       	mov	r0, r18
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <DIO_voidTogPinValue+0xc4>
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	0a 94       	dec	r0
    1d5a:	e2 f7       	brpl	.-8      	; 0x1d54 <DIO_voidTogPinValue+0xc0>
    1d5c:	84 27       	eor	r24, r20
    1d5e:	8c 93       	st	X, r24
    1d60:	13 c0       	rjmp	.+38     	; 0x1d88 <DIO_voidTogPinValue+0xf4>
			case DIO_PORTD:TOG_BIT(DIO_PORTD_REG,Copy_u8pin); break;
    1d62:	a2 e3       	ldi	r26, 0x32	; 50
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e2 e3       	ldi	r30, 0x32	; 50
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	48 2f       	mov	r20, r24
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	02 2e       	mov	r0, r18
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <DIO_voidTogPinValue+0xec>
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	0a 94       	dec	r0
    1d82:	e2 f7       	brpl	.-8      	; 0x1d7c <DIO_voidTogPinValue+0xe8>
    1d84:	84 27       	eor	r24, r20
    1d86:	8c 93       	st	X, r24
			}

	}else {
		//return error
	}
}
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <ADC_voidInit>:
#include "ADC_int.h"

#define ADCL_REG (*(volatile u8*)0x24)
#define ADCH_REG (*(volatile u8*)0x25)

void ADC_voidInit(){
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADPS0);
    1d9e:	a6 e2       	ldi	r26, 0x26	; 38
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e6 e2       	ldi	r30, 0x26	; 38
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	81 60       	ori	r24, 0x01	; 1
    1daa:	8c 93       	st	X, r24
	SET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADPS1);
    1dac:	a6 e2       	ldi	r26, 0x26	; 38
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e6 e2       	ldi	r30, 0x26	; 38
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	82 60       	ori	r24, 0x02	; 2
    1db8:	8c 93       	st	X, r24
	SET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADPS2);
    1dba:	a6 e2       	ldi	r26, 0x26	; 38
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e6 e2       	ldi	r30, 0x26	; 38
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	84 60       	ori	r24, 0x04	; 4
    1dc6:	8c 93       	st	X, r24
	SET_BIT(ADC_ADMUX_REG,ADC_ADMUX_REFS0);
    1dc8:	a7 e2       	ldi	r26, 0x27	; 39
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e7 e2       	ldi	r30, 0x27	; 39
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	80 64       	ori	r24, 0x40	; 64
    1dd4:	8c 93       	st	X, r24
	CLR_BIT(ADC_ADMUX_REG,ADC_ADMUX_REFS1);
    1dd6:	a7 e2       	ldi	r26, 0x27	; 39
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e7 e2       	ldi	r30, 0x27	; 39
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	8f 77       	andi	r24, 0x7F	; 127
    1de2:	8c 93       	st	X, r24
	SET_BIT(ADC_ADCSRA_REG,ADC_ADCSRA_ADEN);
    1de4:	a6 e2       	ldi	r26, 0x26	; 38
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e6 e2       	ldi	r30, 0x26	; 38
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	80 68       	ori	r24, 0x80	; 128
    1df0:	8c 93       	st	X, r24
}
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <ADC_u16StartConversion>:

u16 ADC_u16StartConversion(u8 Copy_u8ChannelID) {
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <ADC_u16StartConversion+0x6>
    1dfe:	0f 92       	push	r0
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	8b 83       	std	Y+3, r24	; 0x03
    ADC_ADMUX_REG &= 0b11100000;
    1e06:	a7 e2       	ldi	r26, 0x27	; 39
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e7 e2       	ldi	r30, 0x27	; 39
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	80 7e       	andi	r24, 0xE0	; 224
    1e12:	8c 93       	st	X, r24
    ADC_ADMUX_REG |= (Copy_u8ChannelID & 0x07);
    1e14:	a7 e2       	ldi	r26, 0x27	; 39
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e7 e2       	ldi	r30, 0x27	; 39
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	98 2f       	mov	r25, r24
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	87 70       	andi	r24, 0x07	; 7
    1e24:	89 2b       	or	r24, r25
    1e26:	8c 93       	st	X, r24

    SET_BIT(ADC_ADCSRA_REG, ADC_ADCSRA_ADSC);
    1e28:	a6 e2       	ldi	r26, 0x26	; 38
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e6 e2       	ldi	r30, 0x26	; 38
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	80 64       	ori	r24, 0x40	; 64
    1e34:	8c 93       	st	X, r24

    while (!GET_BIT(ADC_ADCSRA_REG, ADC_ADCSRA_ADIF));
    1e36:	e6 e2       	ldi	r30, 0x26	; 38
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	82 95       	swap	r24
    1e3e:	8f 70       	andi	r24, 0x0F	; 15
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	81 70       	andi	r24, 0x01	; 1
    1e46:	90 70       	andi	r25, 0x00	; 0
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	a9 f3       	breq	.-22     	; 0x1e36 <ADC_u16StartConversion+0x3e>
    SET_BIT(ADC_ADCSRA_REG, ADC_ADCSRA_ADIF);
    1e4c:	a6 e2       	ldi	r26, 0x26	; 38
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e6 e2       	ldi	r30, 0x26	; 38
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	80 61       	ori	r24, 0x10	; 16
    1e58:	8c 93       	st	X, r24

    u16 result = ADC_ADCL_REG;
    1e5a:	e4 e2       	ldi	r30, 0x24	; 36
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	88 2f       	mov	r24, r24
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9a 83       	std	Y+2, r25	; 0x02
    1e66:	89 83       	std	Y+1, r24	; 0x01
    result |= (ADC_ADCH_REG << 8);
    1e68:	e5 e2       	ldi	r30, 0x25	; 37
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	88 2f       	mov	r24, r24
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	98 2f       	mov	r25, r24
    1e74:	88 27       	eor	r24, r24
    1e76:	9c 01       	movw	r18, r24
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7c:	82 2b       	or	r24, r18
    1e7e:	93 2b       	or	r25, r19
    1e80:	9a 83       	std	Y+2, r25	; 0x02
    1e82:	89 83       	std	Y+1, r24	; 0x01

    return result;
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <TEMP_Read>:
#include "../../MCAL/ADC/ADC_int.h"
#include "../../MCAL/UART/UART_int.h"
#include "../../Service/Std_type.h"
#include "TEMP_int.h"

u8 TEMP_Read(void) {
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	00 d0       	rcall	.+0      	; 0x1e9a <TEMP_Read+0x6>
    1e9a:	0f 92       	push	r0
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    u16 adc_value = ADC_u16StartConversion(0);
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <ADC_u16StartConversion>
    1ea6:	9b 83       	std	Y+3, r25	; 0x03
    1ea8:	8a 83       	std	Y+2, r24	; 0x02
    u8 temperature = (adc_value * 500UL) / 1024;
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	9b 81       	ldd	r25, Y+3	; 0x03
    1eae:	cc 01       	movw	r24, r24
    1eb0:	a0 e0       	ldi	r26, 0x00	; 0
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	24 ef       	ldi	r18, 0xF4	; 244
    1eb6:	31 e0       	ldi	r19, 0x01	; 1
    1eb8:	40 e0       	ldi	r20, 0x00	; 0
    1eba:	50 e0       	ldi	r21, 0x00	; 0
    1ebc:	bc 01       	movw	r22, r24
    1ebe:	cd 01       	movw	r24, r26
    1ec0:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__mulsi3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	07 2e       	mov	r0, r23
    1eca:	7a e0       	ldi	r23, 0x0A	; 10
    1ecc:	b6 95       	lsr	r27
    1ece:	a7 95       	ror	r26
    1ed0:	97 95       	ror	r25
    1ed2:	87 95       	ror	r24
    1ed4:	7a 95       	dec	r23
    1ed6:	d1 f7       	brne	.-12     	; 0x1ecc <TEMP_Read+0x38>
    1ed8:	70 2d       	mov	r23, r0
    1eda:	89 83       	std	Y+1, r24	; 0x01
    return temperature;
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <SSD_Init>:
#include "../../MCAL/DIO/DIO_int.h"
#include "SSD_control.h"
#include <util/delay.h>

void SSD_Init(void){
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    // Segments (PORTC) as outputs
    DIO_voidSetPortDirection(DIO_PORTC, DIO_PORT_OUTPUT);
    1ef2:	82 e0       	ldi	r24, 0x02	; 2
    1ef4:	6f ef       	ldi	r22, 0xFF	; 255
    1ef6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <DIO_voidSetPortDirection>

    // Digit enables (PD5, PD6) as outputs
    DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN_5, DIO_PIN_OUTPUT);
    1efa:	83 e0       	ldi	r24, 0x03	; 3
    1efc:	65 e0       	ldi	r22, 0x05	; 5
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	0e 94 87 0a 	call	0x150e	; 0x150e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN_6, DIO_PIN_OUTPUT);
    1f04:	83 e0       	ldi	r24, 0x03	; 3
    1f06:	66 e0       	ldi	r22, 0x06	; 6
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 87 0a 	call	0x150e	; 0x150e <DIO_voidSetPinDirection>

    SSD_Disable(); // Disable display at startup
    1f0e:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <SSD_Disable>
}
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <SSD_Disable>:

void SSD_Disable(void){
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    // Disable both digits (active LOW logic)
    DIO_voidSetPinValue(DIO_PORTD, DIO_PIN_5, DIO_PIN_HIGH);
    1f20:	83 e0       	ldi	r24, 0x03	; 3
    1f22:	65 e0       	ldi	r22, 0x05	; 5
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DIO_PORTD, DIO_PIN_6, DIO_PIN_HIGH);
    1f2a:	83 e0       	ldi	r24, 0x03	; 3
    1f2c:	66 e0       	ldi	r22, 0x06	; 6
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>
}
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <SSD_Enable>:

void SSD_Enable(u8 digit){
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	0f 92       	push	r0
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	89 83       	std	Y+1, r24	; 0x01
    if (digit == 1){
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	81 30       	cpi	r24, 0x01	; 1
    1f4a:	59 f4       	brne	.+22     	; 0x1f62 <SSD_Enable+0x28>
        DIO_voidSetPinValue(DIO_PORTD, DIO_PIN_5, DIO_PIN_LOW);  // Enable digit 1
    1f4c:	83 e0       	ldi	r24, 0x03	; 3
    1f4e:	65 e0       	ldi	r22, 0x05	; 5
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>
        DIO_voidSetPinValue(DIO_PORTD, DIO_PIN_6, DIO_PIN_HIGH); // Disable digit 2
    1f56:	83 e0       	ldi	r24, 0x03	; 3
    1f58:	66 e0       	ldi	r22, 0x06	; 6
    1f5a:	41 e0       	ldi	r20, 0x01	; 1
    1f5c:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>
    1f60:	0d c0       	rjmp	.+26     	; 0x1f7c <SSD_Enable+0x42>
    } else if (digit == 2){
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	82 30       	cpi	r24, 0x02	; 2
    1f66:	51 f4       	brne	.+20     	; 0x1f7c <SSD_Enable+0x42>
        DIO_voidSetPinValue(DIO_PORTD, DIO_PIN_5, DIO_PIN_HIGH); // Disable digit 1
    1f68:	83 e0       	ldi	r24, 0x03	; 3
    1f6a:	65 e0       	ldi	r22, 0x05	; 5
    1f6c:	41 e0       	ldi	r20, 0x01	; 1
    1f6e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>
        DIO_voidSetPinValue(DIO_PORTD, DIO_PIN_6, DIO_PIN_LOW);  // Enable digit 2
    1f72:	83 e0       	ldi	r24, 0x03	; 3
    1f74:	66 e0       	ldi	r22, 0x06	; 6
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>
    }
}
    1f7c:	0f 90       	pop	r0
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <SSD_Write>:
void SSD_Write(u8 number){
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	6f 97       	sbiw	r28, 0x1f	; 31
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	cd bf       	out	0x3d, r28	; 61
    1f98:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 tens = number / 10;
    1f9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f9c:	9a e0       	ldi	r25, 0x0A	; 10
    1f9e:	69 2f       	mov	r22, r25
    1fa0:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__udivmodqi4>
    1fa4:	8e 8f       	std	Y+30, r24	; 0x1e
	    u8 units = number % 10;
    1fa6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fa8:	9a e0       	ldi	r25, 0x0A	; 10
    1faa:	69 2f       	mov	r22, r25
    1fac:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__udivmodqi4>
    1fb0:	89 2f       	mov	r24, r25
    1fb2:	8d 8f       	std	Y+29, r24	; 0x1d

	    SSD_SendPattern(tens);
    1fb4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fb6:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SSD_SendPattern>
	    SSD_Enable(1);
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <SSD_Enable>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a0 ea       	ldi	r26, 0xA0	; 160
    1fc6:	b0 e4       	ldi	r27, 0x40	; 64
    1fc8:	89 8f       	std	Y+25, r24	; 0x19
    1fca:	9a 8f       	std	Y+26, r25	; 0x1a
    1fcc:	ab 8f       	std	Y+27, r26	; 0x1b
    1fce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a e7       	ldi	r20, 0x7A	; 122
    1fde:	55 e4       	ldi	r21, 0x45	; 69
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	8d 8b       	std	Y+21, r24	; 0x15
    1fea:	9e 8b       	std	Y+22, r25	; 0x16
    1fec:	af 8b       	std	Y+23, r26	; 0x17
    1fee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ff0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e8       	ldi	r20, 0x80	; 128
    1ffe:	5f e3       	ldi	r21, 0x3F	; 63
    2000:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2004:	88 23       	and	r24, r24
    2006:	2c f4       	brge	.+10     	; 0x2012 <SSD_Write+0x8e>
		__ticks = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9c 8b       	std	Y+20, r25	; 0x14
    200e:	8b 8b       	std	Y+19, r24	; 0x13
    2010:	3f c0       	rjmp	.+126    	; 0x2090 <SSD_Write+0x10c>
	else if (__tmp > 65535)
    2012:	6d 89       	ldd	r22, Y+21	; 0x15
    2014:	7e 89       	ldd	r23, Y+22	; 0x16
    2016:	8f 89       	ldd	r24, Y+23	; 0x17
    2018:	98 8d       	ldd	r25, Y+24	; 0x18
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	57 e4       	ldi	r21, 0x47	; 71
    2022:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	4c f5       	brge	.+82     	; 0x207c <SSD_Write+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202a:	69 8d       	ldd	r22, Y+25	; 0x19
    202c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    202e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2030:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e2       	ldi	r20, 0x20	; 32
    2038:	51 e4       	ldi	r21, 0x41	; 65
    203a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	9c 8b       	std	Y+20, r25	; 0x14
    2050:	8b 8b       	std	Y+19, r24	; 0x13
    2052:	0f c0       	rjmp	.+30     	; 0x2072 <SSD_Write+0xee>
    2054:	80 e9       	ldi	r24, 0x90	; 144
    2056:	91 e0       	ldi	r25, 0x01	; 1
    2058:	9a 8b       	std	Y+18, r25	; 0x12
    205a:	89 8b       	std	Y+17, r24	; 0x11
    205c:	89 89       	ldd	r24, Y+17	; 0x11
    205e:	9a 89       	ldd	r25, Y+18	; 0x12
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <SSD_Write+0xdc>
    2064:	9a 8b       	std	Y+18, r25	; 0x12
    2066:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2068:	8b 89       	ldd	r24, Y+19	; 0x13
    206a:	9c 89       	ldd	r25, Y+20	; 0x14
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	9c 8b       	std	Y+20, r25	; 0x14
    2070:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2072:	8b 89       	ldd	r24, Y+19	; 0x13
    2074:	9c 89       	ldd	r25, Y+20	; 0x14
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	69 f7       	brne	.-38     	; 0x2054 <SSD_Write+0xd0>
    207a:	14 c0       	rjmp	.+40     	; 0x20a4 <SSD_Write+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207c:	6d 89       	ldd	r22, Y+21	; 0x15
    207e:	7e 89       	ldd	r23, Y+22	; 0x16
    2080:	8f 89       	ldd	r24, Y+23	; 0x17
    2082:	98 8d       	ldd	r25, Y+24	; 0x18
    2084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9c 8b       	std	Y+20, r25	; 0x14
    208e:	8b 8b       	std	Y+19, r24	; 0x13
    2090:	8b 89       	ldd	r24, Y+19	; 0x13
    2092:	9c 89       	ldd	r25, Y+20	; 0x14
    2094:	98 8b       	std	Y+16, r25	; 0x10
    2096:	8f 87       	std	Y+15, r24	; 0x0f
    2098:	8f 85       	ldd	r24, Y+15	; 0x0f
    209a:	98 89       	ldd	r25, Y+16	; 0x10
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <SSD_Write+0x118>
    20a0:	98 8b       	std	Y+16, r25	; 0x10
    20a2:	8f 87       	std	Y+15, r24	; 0x0f
	    _delay_ms(5);
	    SSD_Disable();
    20a4:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <SSD_Disable>

	    SSD_SendPattern(units);
    20a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20aa:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SSD_SendPattern>
	    SSD_Enable(2);
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    20b0:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <SSD_Enable>
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	a0 ea       	ldi	r26, 0xA0	; 160
    20ba:	b0 e4       	ldi	r27, 0x40	; 64
    20bc:	8b 87       	std	Y+11, r24	; 0x0b
    20be:	9c 87       	std	Y+12, r25	; 0x0c
    20c0:	ad 87       	std	Y+13, r26	; 0x0d
    20c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	4a e7       	ldi	r20, 0x7A	; 122
    20d2:	55 e4       	ldi	r21, 0x45	; 69
    20d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	8f 83       	std	Y+7, r24	; 0x07
    20de:	98 87       	std	Y+8, r25	; 0x08
    20e0:	a9 87       	std	Y+9, r26	; 0x09
    20e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e4:	6f 81       	ldd	r22, Y+7	; 0x07
    20e6:	78 85       	ldd	r23, Y+8	; 0x08
    20e8:	89 85       	ldd	r24, Y+9	; 0x09
    20ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e8       	ldi	r20, 0x80	; 128
    20f2:	5f e3       	ldi	r21, 0x3F	; 63
    20f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f8:	88 23       	and	r24, r24
    20fa:	2c f4       	brge	.+10     	; 0x2106 <SSD_Write+0x182>
		__ticks = 1;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
    2104:	3f c0       	rjmp	.+126    	; 0x2184 <SSD_Write+0x200>
	else if (__tmp > 65535)
    2106:	6f 81       	ldd	r22, Y+7	; 0x07
    2108:	78 85       	ldd	r23, Y+8	; 0x08
    210a:	89 85       	ldd	r24, Y+9	; 0x09
    210c:	9a 85       	ldd	r25, Y+10	; 0x0a
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	3f ef       	ldi	r19, 0xFF	; 255
    2112:	4f e7       	ldi	r20, 0x7F	; 127
    2114:	57 e4       	ldi	r21, 0x47	; 71
    2116:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    211a:	18 16       	cp	r1, r24
    211c:	4c f5       	brge	.+82     	; 0x2170 <SSD_Write+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2120:	7c 85       	ldd	r23, Y+12	; 0x0c
    2122:	8d 85       	ldd	r24, Y+13	; 0x0d
    2124:	9e 85       	ldd	r25, Y+14	; 0x0e
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e2       	ldi	r20, 0x20	; 32
    212c:	51 e4       	ldi	r21, 0x41	; 65
    212e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	bc 01       	movw	r22, r24
    2138:	cd 01       	movw	r24, r26
    213a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	9e 83       	std	Y+6, r25	; 0x06
    2144:	8d 83       	std	Y+5, r24	; 0x05
    2146:	0f c0       	rjmp	.+30     	; 0x2166 <SSD_Write+0x1e2>
    2148:	80 e9       	ldi	r24, 0x90	; 144
    214a:	91 e0       	ldi	r25, 0x01	; 1
    214c:	9c 83       	std	Y+4, r25	; 0x04
    214e:	8b 83       	std	Y+3, r24	; 0x03
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <SSD_Write+0x1d0>
    2158:	9c 83       	std	Y+4, r25	; 0x04
    215a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215c:	8d 81       	ldd	r24, Y+5	; 0x05
    215e:	9e 81       	ldd	r25, Y+6	; 0x06
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	9e 83       	std	Y+6, r25	; 0x06
    2164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	69 f7       	brne	.-38     	; 0x2148 <SSD_Write+0x1c4>
    216e:	14 c0       	rjmp	.+40     	; 0x2198 <SSD_Write+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2170:	6f 81       	ldd	r22, Y+7	; 0x07
    2172:	78 85       	ldd	r23, Y+8	; 0x08
    2174:	89 85       	ldd	r24, Y+9	; 0x09
    2176:	9a 85       	ldd	r25, Y+10	; 0x0a
    2178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	8d 83       	std	Y+5, r24	; 0x05
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
    2186:	9e 81       	ldd	r25, Y+6	; 0x06
    2188:	9a 83       	std	Y+2, r25	; 0x02
    218a:	89 83       	std	Y+1, r24	; 0x01
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	9a 81       	ldd	r25, Y+2	; 0x02
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	f1 f7       	brne	.-4      	; 0x2190 <SSD_Write+0x20c>
    2194:	9a 83       	std	Y+2, r25	; 0x02
    2196:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms(5);
	    SSD_Disable();
    2198:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <SSD_Disable>
}
    219c:	6f 96       	adiw	r28, 0x1f	; 31
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <SSD_SendPattern>:



void SSD_SendPattern(u8 digit){
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	60 97       	sbiw	r28, 0x10	; 16
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	8b 87       	std	Y+11, r24	; 0x0b
                      0x6D, //5
                      0x7D, //6
                      0x07, //7
                      0x7F, //8
                      0x6F  //9
                     };
    21c4:	ce 01       	movw	r24, r28
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	9d 87       	std	Y+13, r25	; 0x0d
    21ca:	8c 87       	std	Y+12, r24	; 0x0c
    21cc:	ec e6       	ldi	r30, 0x6C	; 108
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	ff 87       	std	Y+15, r31	; 0x0f
    21d2:	ee 87       	std	Y+14, r30	; 0x0e
    21d4:	fa e0       	ldi	r31, 0x0A	; 10
    21d6:	f8 8b       	std	Y+16, r31	; 0x10
    21d8:	ee 85       	ldd	r30, Y+14	; 0x0e
    21da:	ff 85       	ldd	r31, Y+15	; 0x0f
    21dc:	00 80       	ld	r0, Z
    21de:	8e 85       	ldd	r24, Y+14	; 0x0e
    21e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	9f 87       	std	Y+15, r25	; 0x0f
    21e6:	8e 87       	std	Y+14, r24	; 0x0e
    21e8:	ec 85       	ldd	r30, Y+12	; 0x0c
    21ea:	fd 85       	ldd	r31, Y+13	; 0x0d
    21ec:	00 82       	st	Z, r0
    21ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    21f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    21f2:	01 96       	adiw	r24, 0x01	; 1
    21f4:	9d 87       	std	Y+13, r25	; 0x0d
    21f6:	8c 87       	std	Y+12, r24	; 0x0c
    21f8:	98 89       	ldd	r25, Y+16	; 0x10
    21fa:	91 50       	subi	r25, 0x01	; 1
    21fc:	98 8b       	std	Y+16, r25	; 0x10
    21fe:	e8 89       	ldd	r30, Y+16	; 0x10
    2200:	ee 23       	and	r30, r30
    2202:	51 f7       	brne	.-44     	; 0x21d8 <SSD_SendPattern+0x2a>

    if (digit <= 9){
    2204:	8b 85       	ldd	r24, Y+11	; 0x0b
    2206:	8a 30       	cpi	r24, 0x0A	; 10
    2208:	70 f4       	brcc	.+28     	; 0x2226 <SSD_SendPattern+0x78>
        DIO_voidSetPortValue(DIO_PORTC, numbers[digit]);
    220a:	8b 85       	ldd	r24, Y+11	; 0x0b
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	ce 01       	movw	r24, r28
    2212:	01 96       	adiw	r24, 0x01	; 1
    2214:	fc 01       	movw	r30, r24
    2216:	e2 0f       	add	r30, r18
    2218:	f3 1f       	adc	r31, r19
    221a:	90 81       	ld	r25, Z
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	69 2f       	mov	r22, r25
    2220:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <DIO_voidSetPortValue>
    2224:	04 c0       	rjmp	.+8      	; 0x222e <SSD_SendPattern+0x80>
    } else {
        DIO_voidSetPortValue(DIO_PORTC, 0x00); // Blank if out of range
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <DIO_voidSetPortValue>
    }
}
    222e:	60 96       	adiw	r28, 0x10	; 16
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	cd bf       	out	0x3d, r28	; 61
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <SSD_Refresh>:

void SSD_Refresh(u8 number){
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	00 d0       	rcall	.+0      	; 0x2246 <SSD_Refresh+0x6>
    2246:	0f 92       	push	r0
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	8a 83       	std	Y+2, r24	; 0x02
    static u8 digitFlag = 0;
    u8 digit = (digitFlag == 0) ? (number / 10) : (number % 10);
    224e:	80 91 7e 00 	lds	r24, 0x007E
    2252:	88 23       	and	r24, r24
    2254:	39 f4       	brne	.+14     	; 0x2264 <SSD_Refresh+0x24>
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	9a e0       	ldi	r25, 0x0A	; 10
    225a:	69 2f       	mov	r22, r25
    225c:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__udivmodqi4>
    2260:	8b 83       	std	Y+3, r24	; 0x03
    2262:	07 c0       	rjmp	.+14     	; 0x2272 <SSD_Refresh+0x32>
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	9a e0       	ldi	r25, 0x0A	; 10
    2268:	69 2f       	mov	r22, r25
    226a:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__udivmodqi4>
    226e:	89 2f       	mov	r24, r25
    2270:	8b 83       	std	Y+3, r24	; 0x03
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	89 83       	std	Y+1, r24	; 0x01

    SSD_SendPattern(digit);
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SSD_SendPattern>

    if (digitFlag == 0){
    227c:	80 91 7e 00 	lds	r24, 0x007E
    2280:	88 23       	and	r24, r24
    2282:	21 f4       	brne	.+8      	; 0x228c <SSD_Refresh+0x4c>
        SSD_Enable(1);
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <SSD_Enable>
    228a:	03 c0       	rjmp	.+6      	; 0x2292 <SSD_Refresh+0x52>
    } else {
        SSD_Enable(2);
    228c:	82 e0       	ldi	r24, 0x02	; 2
    228e:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <SSD_Enable>
    }

    digitFlag ^= 1; // Toggle digit
    2292:	80 91 7e 00 	lds	r24, 0x007E
    2296:	91 e0       	ldi	r25, 0x01	; 1
    2298:	89 27       	eor	r24, r25
    229a:	80 93 7e 00 	sts	0x007E, r24
}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <ELEMENT_Init>:
#include "../../MCAL/DIO/DIO_int.h"
#include "Element_int.h"

void ELEMENT_Init(void){
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    // Heater OFF
    DIO_voidSetPinValue(DIO_PORTB, DIO_PIN_0, DIO_PIN_LOW);
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>
    // Cooler OFF
    DIO_voidSetPinValue(DIO_PORTB, DIO_PIN_1, DIO_PIN_LOW);
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	61 e0       	ldi	r22, 0x01	; 1
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>
    // LED OFF
    DIO_voidSetPinValue(DIO_PORTB, DIO_PIN_2, DIO_PIN_LOW);
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	62 e0       	ldi	r22, 0x02	; 2
    22ca:	40 e0       	ldi	r20, 0x00	; 0
    22cc:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>
}
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <ELEMENT_SetState>:

void ELEMENT_SetState(Element_t element, Element_State_t state){
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	00 d0       	rcall	.+0      	; 0x22dc <ELEMENT_SetState+0x6>
    22dc:	00 d0       	rcall	.+0      	; 0x22de <ELEMENT_SetState+0x8>
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	89 83       	std	Y+1, r24	; 0x01
    22e4:	6a 83       	std	Y+2, r22	; 0x02
    switch (element){
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	3c 83       	std	Y+4, r19	; 0x04
    22ee:	2b 83       	std	Y+3, r18	; 0x03
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	9c 81       	ldd	r25, Y+4	; 0x04
    22f4:	81 30       	cpi	r24, 0x01	; 1
    22f6:	91 05       	cpc	r25, r1
    22f8:	79 f0       	breq	.+30     	; 0x2318 <ELEMENT_SetState+0x42>
    22fa:	2b 81       	ldd	r18, Y+3	; 0x03
    22fc:	3c 81       	ldd	r19, Y+4	; 0x04
    22fe:	22 30       	cpi	r18, 0x02	; 2
    2300:	31 05       	cpc	r19, r1
    2302:	81 f0       	breq	.+32     	; 0x2324 <ELEMENT_SetState+0x4e>
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	9c 81       	ldd	r25, Y+4	; 0x04
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	89 f4       	brne	.+34     	; 0x232e <ELEMENT_SetState+0x58>
        case ELEMENT_HEATER:
            DIO_voidSetPinValue(DIO_PORTB, DIO_PIN_0, state);
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	60 e0       	ldi	r22, 0x00	; 0
    2310:	4a 81       	ldd	r20, Y+2	; 0x02
    2312:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>
    2316:	0b c0       	rjmp	.+22     	; 0x232e <ELEMENT_SetState+0x58>
            break;
        case ELEMENT_PELTIER:
            DIO_voidSetPinValue(DIO_PORTB, DIO_PIN_1, state);
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	61 e0       	ldi	r22, 0x01	; 1
    231c:	4a 81       	ldd	r20, Y+2	; 0x02
    231e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>
    2322:	05 c0       	rjmp	.+10     	; 0x232e <ELEMENT_SetState+0x58>
            break;
        case ELEMENT_LED:
            DIO_voidSetPinValue(DIO_PORTB, DIO_PIN_2, state);
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	62 e0       	ldi	r22, 0x02	; 2
    2328:	4a 81       	ldd	r20, Y+2	; 0x02
    232a:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_voidSetPinValue>
            break;
    }
}
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <ELEMENT_ToggleState>:

void ELEMENT_ToggleState(Element_t element){
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	0f 92       	push	r0
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	89 83       	std	Y+1, r24	; 0x01
    switch (element){
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	88 2f       	mov	r24, r24
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	82 30       	cpi	r24, 0x02	; 2
    2350:	91 05       	cpc	r25, r1
    2352:	21 f4       	brne	.+8      	; 0x235c <ELEMENT_ToggleState+0x20>
        case ELEMENT_LED:
        	DIO_voidTogPinValue(DIO_PORTB, DIO_PIN_2);
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	62 e0       	ldi	r22, 0x02	; 2
    2358:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <DIO_voidTogPinValue>
            break;
    }
}
    235c:	0f 90       	pop	r0
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <BUTTON_Init>:
#include "../../MCAL/DIO/DIO_int.h"
#include "../../Service/bit_math.h"
#include "../../Service/reg.h"
#include "../../MCAL/Timer/Timer_int.h"

void BUTTON_Init(void) {
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(ON_OFF_PORT,   ON_OFF_PIN,    DIO_PIN_INPUT);
    236c:	83 e0       	ldi	r24, 0x03	; 3
    236e:	62 e0       	ldi	r22, 0x02	; 2
    2370:	40 e0       	ldi	r20, 0x00	; 0
    2372:	0e 94 87 0a 	call	0x150e	; 0x150e <DIO_voidSetPinDirection>
	    DIO_voidEnablePullUp(ON_OFF_PORT,      ON_OFF_PIN);
    2376:	83 e0       	ldi	r24, 0x03	; 3
    2378:	62 e0       	ldi	r22, 0x02	; 2
    237a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <DIO_voidEnablePullUp>

	    DIO_voidSetPinDirection(UP_BUTTON_PORT,   UP_BUTTON_PIN,   DIO_PIN_INPUT);
    237e:	83 e0       	ldi	r24, 0x03	; 3
    2380:	63 e0       	ldi	r22, 0x03	; 3
    2382:	40 e0       	ldi	r20, 0x00	; 0
    2384:	0e 94 87 0a 	call	0x150e	; 0x150e <DIO_voidSetPinDirection>
	    DIO_voidEnablePullUp(UP_BUTTON_PORT,     UP_BUTTON_PIN);
    2388:	83 e0       	ldi	r24, 0x03	; 3
    238a:	63 e0       	ldi	r22, 0x03	; 3
    238c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <DIO_voidEnablePullUp>

	    DIO_voidSetPinDirection(DOWN_BUTTON_PORT, DOWN_BUTTON_PIN, DIO_PIN_INPUT);
    2390:	83 e0       	ldi	r24, 0x03	; 3
    2392:	64 e0       	ldi	r22, 0x04	; 4
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	0e 94 87 0a 	call	0x150e	; 0x150e <DIO_voidSetPinDirection>
	    DIO_voidEnablePullUp(DOWN_BUTTON_PORT,    DOWN_BUTTON_PIN);
    239a:	83 e0       	ldi	r24, 0x03	; 3
    239c:	64 e0       	ldi	r22, 0x04	; 4
    239e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <DIO_voidEnablePullUp>

}
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <BUTTON_UP_pressed>:

u8 BUTTON_UP_pressed(void) {
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	2f 97       	sbiw	r28, 0x0f	; 15
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    if (DIO_u8GetPinValue(UP_BUTTON_PORT, UP_BUTTON_PIN) == DIO_PIN_LOW) {
    23bc:	83 e0       	ldi	r24, 0x03	; 3
    23be:	63 e0       	ldi	r22, 0x03	; 3
    23c0:	0e 94 8f 0c 	call	0x191e	; 0x191e <DIO_u8GetPinValue>
    23c4:	88 23       	and	r24, r24
    23c6:	09 f0       	breq	.+2      	; 0x23ca <BUTTON_UP_pressed+0x22>
    23c8:	7b c0       	rjmp	.+246    	; 0x24c0 <BUTTON_UP_pressed+0x118>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a8 ec       	ldi	r26, 0xC8	; 200
    23d0:	b2 e4       	ldi	r27, 0x42	; 66
    23d2:	8b 87       	std	Y+11, r24	; 0x0b
    23d4:	9c 87       	std	Y+12, r25	; 0x0c
    23d6:	ad 87       	std	Y+13, r26	; 0x0d
    23d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23da:	6b 85       	ldd	r22, Y+11	; 0x0b
    23dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23de:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	4a e7       	ldi	r20, 0x7A	; 122
    23e8:	55 e4       	ldi	r21, 0x45	; 69
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	8f 83       	std	Y+7, r24	; 0x07
    23f4:	98 87       	std	Y+8, r25	; 0x08
    23f6:	a9 87       	std	Y+9, r26	; 0x09
    23f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23fa:	6f 81       	ldd	r22, Y+7	; 0x07
    23fc:	78 85       	ldd	r23, Y+8	; 0x08
    23fe:	89 85       	ldd	r24, Y+9	; 0x09
    2400:	9a 85       	ldd	r25, Y+10	; 0x0a
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	2c f4       	brge	.+10     	; 0x241c <BUTTON_UP_pressed+0x74>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9e 83       	std	Y+6, r25	; 0x06
    2418:	8d 83       	std	Y+5, r24	; 0x05
    241a:	3f c0       	rjmp	.+126    	; 0x249a <BUTTON_UP_pressed+0xf2>
	else if (__tmp > 65535)
    241c:	6f 81       	ldd	r22, Y+7	; 0x07
    241e:	78 85       	ldd	r23, Y+8	; 0x08
    2420:	89 85       	ldd	r24, Y+9	; 0x09
    2422:	9a 85       	ldd	r25, Y+10	; 0x0a
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	4c f5       	brge	.+82     	; 0x2486 <BUTTON_UP_pressed+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2434:	6b 85       	ldd	r22, Y+11	; 0x0b
    2436:	7c 85       	ldd	r23, Y+12	; 0x0c
    2438:	8d 85       	ldd	r24, Y+13	; 0x0d
    243a:	9e 85       	ldd	r25, Y+14	; 0x0e
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
    245c:	0f c0       	rjmp	.+30     	; 0x247c <BUTTON_UP_pressed+0xd4>
    245e:	80 e9       	ldi	r24, 0x90	; 144
    2460:	91 e0       	ldi	r25, 0x01	; 1
    2462:	9c 83       	std	Y+4, r25	; 0x04
    2464:	8b 83       	std	Y+3, r24	; 0x03
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <BUTTON_UP_pressed+0xc2>
    246e:	9c 83       	std	Y+4, r25	; 0x04
    2470:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	8d 81       	ldd	r24, Y+5	; 0x05
    2474:	9e 81       	ldd	r25, Y+6	; 0x06
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	9e 83       	std	Y+6, r25	; 0x06
    247a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	8d 81       	ldd	r24, Y+5	; 0x05
    247e:	9e 81       	ldd	r25, Y+6	; 0x06
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	69 f7       	brne	.-38     	; 0x245e <BUTTON_UP_pressed+0xb6>
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <BUTTON_UP_pressed+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	6f 81       	ldd	r22, Y+7	; 0x07
    2488:	78 85       	ldd	r23, Y+8	; 0x08
    248a:	89 85       	ldd	r24, Y+9	; 0x09
    248c:	9a 85       	ldd	r25, Y+10	; 0x0a
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	9e 81       	ldd	r25, Y+6	; 0x06
    249e:	9a 83       	std	Y+2, r25	; 0x02
    24a0:	89 83       	std	Y+1, r24	; 0x01
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <BUTTON_UP_pressed+0xfe>
    24aa:	9a 83       	std	Y+2, r25	; 0x02
    24ac:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(DEBOUNCE_INTERVAL_MS);
        if (DIO_u8GetPinValue(UP_BUTTON_PORT, UP_BUTTON_PIN) == DIO_PIN_LOW)
    24ae:	83 e0       	ldi	r24, 0x03	; 3
    24b0:	63 e0       	ldi	r22, 0x03	; 3
    24b2:	0e 94 8f 0c 	call	0x191e	; 0x191e <DIO_u8GetPinValue>
    24b6:	88 23       	and	r24, r24
    24b8:	19 f4       	brne	.+6      	; 0x24c0 <BUTTON_UP_pressed+0x118>
            return BUTTON_PRESSED;
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	8f 87       	std	Y+15, r24	; 0x0f
    24be:	01 c0       	rjmp	.+2      	; 0x24c2 <BUTTON_UP_pressed+0x11a>
    }
    return BUTTON_NOT_PRESSED;
    24c0:	1f 86       	std	Y+15, r1	; 0x0f
    24c2:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    24c4:	2f 96       	adiw	r28, 0x0f	; 15
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <BUTTON_DOWN_pressed>:

u8 BUTTON_DOWN_pressed(void) {
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	2f 97       	sbiw	r28, 0x0f	; 15
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	f8 94       	cli
    24e4:	de bf       	out	0x3e, r29	; 62
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	cd bf       	out	0x3d, r28	; 61
    if (DIO_u8GetPinValue(DOWN_BUTTON_PORT, DOWN_BUTTON_PIN) == DIO_PIN_LOW) {
    24ea:	83 e0       	ldi	r24, 0x03	; 3
    24ec:	64 e0       	ldi	r22, 0x04	; 4
    24ee:	0e 94 8f 0c 	call	0x191e	; 0x191e <DIO_u8GetPinValue>
    24f2:	88 23       	and	r24, r24
    24f4:	09 f0       	breq	.+2      	; 0x24f8 <BUTTON_DOWN_pressed+0x22>
    24f6:	7b c0       	rjmp	.+246    	; 0x25ee <BUTTON_DOWN_pressed+0x118>
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a8 ec       	ldi	r26, 0xC8	; 200
    24fe:	b2 e4       	ldi	r27, 0x42	; 66
    2500:	8b 87       	std	Y+11, r24	; 0x0b
    2502:	9c 87       	std	Y+12, r25	; 0x0c
    2504:	ad 87       	std	Y+13, r26	; 0x0d
    2506:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2508:	6b 85       	ldd	r22, Y+11	; 0x0b
    250a:	7c 85       	ldd	r23, Y+12	; 0x0c
    250c:	8d 85       	ldd	r24, Y+13	; 0x0d
    250e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	4a e7       	ldi	r20, 0x7A	; 122
    2516:	55 e4       	ldi	r21, 0x45	; 69
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	8f 83       	std	Y+7, r24	; 0x07
    2522:	98 87       	std	Y+8, r25	; 0x08
    2524:	a9 87       	std	Y+9, r26	; 0x09
    2526:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2528:	6f 81       	ldd	r22, Y+7	; 0x07
    252a:	78 85       	ldd	r23, Y+8	; 0x08
    252c:	89 85       	ldd	r24, Y+9	; 0x09
    252e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e8       	ldi	r20, 0x80	; 128
    2536:	5f e3       	ldi	r21, 0x3F	; 63
    2538:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    253c:	88 23       	and	r24, r24
    253e:	2c f4       	brge	.+10     	; 0x254a <BUTTON_DOWN_pressed+0x74>
		__ticks = 1;
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	9e 83       	std	Y+6, r25	; 0x06
    2546:	8d 83       	std	Y+5, r24	; 0x05
    2548:	3f c0       	rjmp	.+126    	; 0x25c8 <BUTTON_DOWN_pressed+0xf2>
	else if (__tmp > 65535)
    254a:	6f 81       	ldd	r22, Y+7	; 0x07
    254c:	78 85       	ldd	r23, Y+8	; 0x08
    254e:	89 85       	ldd	r24, Y+9	; 0x09
    2550:	9a 85       	ldd	r25, Y+10	; 0x0a
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	3f ef       	ldi	r19, 0xFF	; 255
    2556:	4f e7       	ldi	r20, 0x7F	; 127
    2558:	57 e4       	ldi	r21, 0x47	; 71
    255a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    255e:	18 16       	cp	r1, r24
    2560:	4c f5       	brge	.+82     	; 0x25b4 <BUTTON_DOWN_pressed+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2562:	6b 85       	ldd	r22, Y+11	; 0x0b
    2564:	7c 85       	ldd	r23, Y+12	; 0x0c
    2566:	8d 85       	ldd	r24, Y+13	; 0x0d
    2568:	9e 85       	ldd	r25, Y+14	; 0x0e
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e2       	ldi	r20, 0x20	; 32
    2570:	51 e4       	ldi	r21, 0x41	; 65
    2572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	bc 01       	movw	r22, r24
    257c:	cd 01       	movw	r24, r26
    257e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	9e 83       	std	Y+6, r25	; 0x06
    2588:	8d 83       	std	Y+5, r24	; 0x05
    258a:	0f c0       	rjmp	.+30     	; 0x25aa <BUTTON_DOWN_pressed+0xd4>
    258c:	80 e9       	ldi	r24, 0x90	; 144
    258e:	91 e0       	ldi	r25, 0x01	; 1
    2590:	9c 83       	std	Y+4, r25	; 0x04
    2592:	8b 83       	std	Y+3, r24	; 0x03
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	9c 81       	ldd	r25, Y+4	; 0x04
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	f1 f7       	brne	.-4      	; 0x2598 <BUTTON_DOWN_pressed+0xc2>
    259c:	9c 83       	std	Y+4, r25	; 0x04
    259e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a0:	8d 81       	ldd	r24, Y+5	; 0x05
    25a2:	9e 81       	ldd	r25, Y+6	; 0x06
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	9e 83       	std	Y+6, r25	; 0x06
    25a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	00 97       	sbiw	r24, 0x00	; 0
    25b0:	69 f7       	brne	.-38     	; 0x258c <BUTTON_DOWN_pressed+0xb6>
    25b2:	14 c0       	rjmp	.+40     	; 0x25dc <BUTTON_DOWN_pressed+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b4:	6f 81       	ldd	r22, Y+7	; 0x07
    25b6:	78 85       	ldd	r23, Y+8	; 0x08
    25b8:	89 85       	ldd	r24, Y+9	; 0x09
    25ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	9e 83       	std	Y+6, r25	; 0x06
    25c6:	8d 83       	std	Y+5, r24	; 0x05
    25c8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ca:	9e 81       	ldd	r25, Y+6	; 0x06
    25cc:	9a 83       	std	Y+2, r25	; 0x02
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	9a 81       	ldd	r25, Y+2	; 0x02
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <BUTTON_DOWN_pressed+0xfe>
    25d8:	9a 83       	std	Y+2, r25	; 0x02
    25da:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(DEBOUNCE_INTERVAL_MS);
        if (DIO_u8GetPinValue(DOWN_BUTTON_PORT, DOWN_BUTTON_PIN) == DIO_PIN_LOW)
    25dc:	83 e0       	ldi	r24, 0x03	; 3
    25de:	64 e0       	ldi	r22, 0x04	; 4
    25e0:	0e 94 8f 0c 	call	0x191e	; 0x191e <DIO_u8GetPinValue>
    25e4:	88 23       	and	r24, r24
    25e6:	19 f4       	brne	.+6      	; 0x25ee <BUTTON_DOWN_pressed+0x118>
            return BUTTON_PRESSED;
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	8f 87       	std	Y+15, r24	; 0x0f
    25ec:	01 c0       	rjmp	.+2      	; 0x25f0 <BUTTON_DOWN_pressed+0x11a>
    }
    return BUTTON_NOT_PRESSED;
    25ee:	1f 86       	std	Y+15, r1	; 0x0f
    25f0:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    25f2:	2f 96       	adiw	r28, 0x0f	; 15
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <HEATER_Init>:
u8 temp_arr[10] = {0};
u8 avg_temp = 0;
u8 settingModeFlag = 0;
u8 set_temp = 60;

void HEATER_Init(void){
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    ELEMENT_Init();
    260c:	0e 94 55 11 	call	0x22aa	; 0x22aa <ELEMENT_Init>
    SSD_Init();
    2610:	0e 94 75 0f 	call	0x1eea	; 0x1eea <SSD_Init>
}
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	08 95       	ret

0000261a <HEATER_Start>:

void HEATER_Start(void) {
    261a:	df 93       	push	r29
    261c:	cf 93       	push	r28
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    ELEMENT_SetState(ELEMENT_HEATER, ELEMENT_ON);
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	61 e0       	ldi	r22, 0x01	; 1
    2626:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
    ELEMENT_SetState(ELEMENT_PELTIER, ELEMENT_OFF);
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	60 e0       	ldi	r22, 0x00	; 0
    262e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
}
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	08 95       	ret

00002638 <COOLER_Start>:

void COOLER_Start(void) {
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    ELEMENT_SetState(ELEMENT_HEATER, ELEMENT_OFF);
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
    ELEMENT_SetState(ELEMENT_PELTIER, ELEMENT_ON);
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	61 e0       	ldi	r22, 0x01	; 1
    264c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
}
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	08 95       	ret

00002656 <HEATCOOL_Stop>:

void HEATCOOL_Stop(void) {
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    ELEMENT_SetState(ELEMENT_HEATER, ELEMENT_OFF);
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	60 e0       	ldi	r22, 0x00	; 0
    2662:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
    ELEMENT_SetState(ELEMENT_PELTIER, ELEMENT_OFF);
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
}
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <HEATER_HandleOnOffButton>:

void HEATER_HandleOnOffButton(void){
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	2f 97       	sbiw	r28, 0x0f	; 15
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    static u8 lastState = 1;
    u8 currentState = DIO_u8GetPinValue(DIO_PORTD, DIO_PIN_2);
    2688:	83 e0       	ldi	r24, 0x03	; 3
    268a:	62 e0       	ldi	r22, 0x02	; 2
    268c:	0e 94 8f 0c 	call	0x191e	; 0x191e <DIO_u8GetPinValue>
    2690:	8f 87       	std	Y+15, r24	; 0x0f

    if (currentState == 0 && lastState == 1){
    2692:	8f 85       	ldd	r24, Y+15	; 0x0f
    2694:	88 23       	and	r24, r24
    2696:	09 f0       	breq	.+2      	; 0x269a <HEATER_HandleOnOffButton+0x26>
    2698:	81 c0       	rjmp	.+258    	; 0x279c <HEATER_HandleOnOffButton+0x128>
    269a:	80 91 69 00 	lds	r24, 0x0069
    269e:	81 30       	cpi	r24, 0x01	; 1
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <HEATER_HandleOnOffButton+0x30>
    26a2:	7c c0       	rjmp	.+248    	; 0x279c <HEATER_HandleOnOffButton+0x128>
        if (systemState == SYSTEM_OFF){
    26a4:	80 91 7f 00 	lds	r24, 0x007F
    26a8:	88 23       	and	r24, r24
    26aa:	21 f4       	brne	.+8      	; 0x26b4 <HEATER_HandleOnOffButton+0x40>
            systemState = SYSTEM_ON;
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	80 93 7f 00 	sts	0x007F, r24
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <HEATER_HandleOnOffButton+0x44>
        } else {
            systemState = SYSTEM_OFF;
    26b4:	10 92 7f 00 	sts	0x007F, r1
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a8 e4       	ldi	r26, 0x48	; 72
    26be:	b3 e4       	ldi	r27, 0x43	; 67
    26c0:	8b 87       	std	Y+11, r24	; 0x0b
    26c2:	9c 87       	std	Y+12, r25	; 0x0c
    26c4:	ad 87       	std	Y+13, r26	; 0x0d
    26c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    26cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	4a e7       	ldi	r20, 0x7A	; 122
    26d6:	55 e4       	ldi	r21, 0x45	; 69
    26d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	8f 83       	std	Y+7, r24	; 0x07
    26e2:	98 87       	std	Y+8, r25	; 0x08
    26e4:	a9 87       	std	Y+9, r26	; 0x09
    26e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26e8:	6f 81       	ldd	r22, Y+7	; 0x07
    26ea:	78 85       	ldd	r23, Y+8	; 0x08
    26ec:	89 85       	ldd	r24, Y+9	; 0x09
    26ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e8       	ldi	r20, 0x80	; 128
    26f6:	5f e3       	ldi	r21, 0x3F	; 63
    26f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26fc:	88 23       	and	r24, r24
    26fe:	2c f4       	brge	.+10     	; 0x270a <HEATER_HandleOnOffButton+0x96>
		__ticks = 1;
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	9e 83       	std	Y+6, r25	; 0x06
    2706:	8d 83       	std	Y+5, r24	; 0x05
    2708:	3f c0       	rjmp	.+126    	; 0x2788 <HEATER_HandleOnOffButton+0x114>
	else if (__tmp > 65535)
    270a:	6f 81       	ldd	r22, Y+7	; 0x07
    270c:	78 85       	ldd	r23, Y+8	; 0x08
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	3f ef       	ldi	r19, 0xFF	; 255
    2716:	4f e7       	ldi	r20, 0x7F	; 127
    2718:	57 e4       	ldi	r21, 0x47	; 71
    271a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    271e:	18 16       	cp	r1, r24
    2720:	4c f5       	brge	.+82     	; 0x2774 <HEATER_HandleOnOffButton+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2722:	6b 85       	ldd	r22, Y+11	; 0x0b
    2724:	7c 85       	ldd	r23, Y+12	; 0x0c
    2726:	8d 85       	ldd	r24, Y+13	; 0x0d
    2728:	9e 85       	ldd	r25, Y+14	; 0x0e
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	40 e2       	ldi	r20, 0x20	; 32
    2730:	51 e4       	ldi	r21, 0x41	; 65
    2732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	bc 01       	movw	r22, r24
    273c:	cd 01       	movw	r24, r26
    273e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	9e 83       	std	Y+6, r25	; 0x06
    2748:	8d 83       	std	Y+5, r24	; 0x05
    274a:	0f c0       	rjmp	.+30     	; 0x276a <HEATER_HandleOnOffButton+0xf6>
    274c:	80 e9       	ldi	r24, 0x90	; 144
    274e:	91 e0       	ldi	r25, 0x01	; 1
    2750:	9c 83       	std	Y+4, r25	; 0x04
    2752:	8b 83       	std	Y+3, r24	; 0x03
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	9c 81       	ldd	r25, Y+4	; 0x04
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	f1 f7       	brne	.-4      	; 0x2758 <HEATER_HandleOnOffButton+0xe4>
    275c:	9c 83       	std	Y+4, r25	; 0x04
    275e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2760:	8d 81       	ldd	r24, Y+5	; 0x05
    2762:	9e 81       	ldd	r25, Y+6	; 0x06
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	9e 83       	std	Y+6, r25	; 0x06
    2768:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    276a:	8d 81       	ldd	r24, Y+5	; 0x05
    276c:	9e 81       	ldd	r25, Y+6	; 0x06
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	69 f7       	brne	.-38     	; 0x274c <HEATER_HandleOnOffButton+0xd8>
    2772:	14 c0       	rjmp	.+40     	; 0x279c <HEATER_HandleOnOffButton+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2774:	6f 81       	ldd	r22, Y+7	; 0x07
    2776:	78 85       	ldd	r23, Y+8	; 0x08
    2778:	89 85       	ldd	r24, Y+9	; 0x09
    277a:	9a 85       	ldd	r25, Y+10	; 0x0a
    277c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	9e 83       	std	Y+6, r25	; 0x06
    2786:	8d 83       	std	Y+5, r24	; 0x05
    2788:	8d 81       	ldd	r24, Y+5	; 0x05
    278a:	9e 81       	ldd	r25, Y+6	; 0x06
    278c:	9a 83       	std	Y+2, r25	; 0x02
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	9a 81       	ldd	r25, Y+2	; 0x02
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <HEATER_HandleOnOffButton+0x120>
    2798:	9a 83       	std	Y+2, r25	; 0x02
    279a:	89 83       	std	Y+1, r24	; 0x01
        }
        _delay_ms(200);
    }
    lastState = currentState;
    279c:	8f 85       	ldd	r24, Y+15	; 0x0f
    279e:	80 93 69 00 	sts	0x0069, r24
}
    27a2:	2f 96       	adiw	r28, 0x0f	; 15
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	cf 91       	pop	r28
    27b0:	df 91       	pop	r29
    27b2:	08 95       	ret

000027b4 <HandleUpButton>:

void HandleUpButton(void){
    27b4:	df 93       	push	r29
    27b6:	cf 93       	push	r28
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
    27bc:	2f 97       	sbiw	r28, 0x0f	; 15
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	f8 94       	cli
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	cd bf       	out	0x3d, r28	; 61
    static u8 lastState = 1;
    u8 currentState = DIO_u8GetPinValue(DIO_PORTD, DIO_PIN_3);
    27c8:	83 e0       	ldi	r24, 0x03	; 3
    27ca:	63 e0       	ldi	r22, 0x03	; 3
    27cc:	0e 94 8f 0c 	call	0x191e	; 0x191e <DIO_u8GetPinValue>
    27d0:	8f 87       	std	Y+15, r24	; 0x0f

    if (currentState == 0 && lastState == 1){
    27d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27d4:	88 23       	and	r24, r24
    27d6:	09 f0       	breq	.+2      	; 0x27da <HandleUpButton+0x26>
    27d8:	80 c0       	rjmp	.+256    	; 0x28da <HandleUpButton+0x126>
    27da:	80 91 6a 00 	lds	r24, 0x006A
    27de:	81 30       	cpi	r24, 0x01	; 1
    27e0:	09 f0       	breq	.+2      	; 0x27e4 <HandleUpButton+0x30>
    27e2:	7b c0       	rjmp	.+246    	; 0x28da <HandleUpButton+0x126>
        if (set_temp < 75){
    27e4:	80 91 68 00 	lds	r24, 0x0068
    27e8:	8b 34       	cpi	r24, 0x4B	; 75
    27ea:	28 f4       	brcc	.+10     	; 0x27f6 <HandleUpButton+0x42>
            set_temp += 5;
    27ec:	80 91 68 00 	lds	r24, 0x0068
    27f0:	8b 5f       	subi	r24, 0xFB	; 251
    27f2:	80 93 68 00 	sts	0x0068, r24
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	a8 e4       	ldi	r26, 0x48	; 72
    27fc:	b3 e4       	ldi	r27, 0x43	; 67
    27fe:	8b 87       	std	Y+11, r24	; 0x0b
    2800:	9c 87       	std	Y+12, r25	; 0x0c
    2802:	ad 87       	std	Y+13, r26	; 0x0d
    2804:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2806:	6b 85       	ldd	r22, Y+11	; 0x0b
    2808:	7c 85       	ldd	r23, Y+12	; 0x0c
    280a:	8d 85       	ldd	r24, Y+13	; 0x0d
    280c:	9e 85       	ldd	r25, Y+14	; 0x0e
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	4a e7       	ldi	r20, 0x7A	; 122
    2814:	55 e4       	ldi	r21, 0x45	; 69
    2816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	8f 83       	std	Y+7, r24	; 0x07
    2820:	98 87       	std	Y+8, r25	; 0x08
    2822:	a9 87       	std	Y+9, r26	; 0x09
    2824:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2826:	6f 81       	ldd	r22, Y+7	; 0x07
    2828:	78 85       	ldd	r23, Y+8	; 0x08
    282a:	89 85       	ldd	r24, Y+9	; 0x09
    282c:	9a 85       	ldd	r25, Y+10	; 0x0a
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e8       	ldi	r20, 0x80	; 128
    2834:	5f e3       	ldi	r21, 0x3F	; 63
    2836:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    283a:	88 23       	and	r24, r24
    283c:	2c f4       	brge	.+10     	; 0x2848 <HandleUpButton+0x94>
		__ticks = 1;
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	9e 83       	std	Y+6, r25	; 0x06
    2844:	8d 83       	std	Y+5, r24	; 0x05
    2846:	3f c0       	rjmp	.+126    	; 0x28c6 <HandleUpButton+0x112>
	else if (__tmp > 65535)
    2848:	6f 81       	ldd	r22, Y+7	; 0x07
    284a:	78 85       	ldd	r23, Y+8	; 0x08
    284c:	89 85       	ldd	r24, Y+9	; 0x09
    284e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	3f ef       	ldi	r19, 0xFF	; 255
    2854:	4f e7       	ldi	r20, 0x7F	; 127
    2856:	57 e4       	ldi	r21, 0x47	; 71
    2858:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    285c:	18 16       	cp	r1, r24
    285e:	4c f5       	brge	.+82     	; 0x28b2 <HandleUpButton+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2860:	6b 85       	ldd	r22, Y+11	; 0x0b
    2862:	7c 85       	ldd	r23, Y+12	; 0x0c
    2864:	8d 85       	ldd	r24, Y+13	; 0x0d
    2866:	9e 85       	ldd	r25, Y+14	; 0x0e
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	40 e2       	ldi	r20, 0x20	; 32
    286e:	51 e4       	ldi	r21, 0x41	; 65
    2870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	bc 01       	movw	r22, r24
    287a:	cd 01       	movw	r24, r26
    287c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	9e 83       	std	Y+6, r25	; 0x06
    2886:	8d 83       	std	Y+5, r24	; 0x05
    2888:	0f c0       	rjmp	.+30     	; 0x28a8 <HandleUpButton+0xf4>
    288a:	80 e9       	ldi	r24, 0x90	; 144
    288c:	91 e0       	ldi	r25, 0x01	; 1
    288e:	9c 83       	std	Y+4, r25	; 0x04
    2890:	8b 83       	std	Y+3, r24	; 0x03
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	9c 81       	ldd	r25, Y+4	; 0x04
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	f1 f7       	brne	.-4      	; 0x2896 <HandleUpButton+0xe2>
    289a:	9c 83       	std	Y+4, r25	; 0x04
    289c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289e:	8d 81       	ldd	r24, Y+5	; 0x05
    28a0:	9e 81       	ldd	r25, Y+6	; 0x06
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	9e 83       	std	Y+6, r25	; 0x06
    28a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a8:	8d 81       	ldd	r24, Y+5	; 0x05
    28aa:	9e 81       	ldd	r25, Y+6	; 0x06
    28ac:	00 97       	sbiw	r24, 0x00	; 0
    28ae:	69 f7       	brne	.-38     	; 0x288a <HandleUpButton+0xd6>
    28b0:	14 c0       	rjmp	.+40     	; 0x28da <HandleUpButton+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b2:	6f 81       	ldd	r22, Y+7	; 0x07
    28b4:	78 85       	ldd	r23, Y+8	; 0x08
    28b6:	89 85       	ldd	r24, Y+9	; 0x09
    28b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	9e 83       	std	Y+6, r25	; 0x06
    28c4:	8d 83       	std	Y+5, r24	; 0x05
    28c6:	8d 81       	ldd	r24, Y+5	; 0x05
    28c8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ca:	9a 83       	std	Y+2, r25	; 0x02
    28cc:	89 83       	std	Y+1, r24	; 0x01
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	9a 81       	ldd	r25, Y+2	; 0x02
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	f1 f7       	brne	.-4      	; 0x28d2 <HandleUpButton+0x11e>
    28d6:	9a 83       	std	Y+2, r25	; 0x02
    28d8:	89 83       	std	Y+1, r24	; 0x01
        }
        _delay_ms(200);
    }
    lastState = currentState;
    28da:	8f 85       	ldd	r24, Y+15	; 0x0f
    28dc:	80 93 6a 00 	sts	0x006A, r24
}
    28e0:	2f 96       	adiw	r28, 0x0f	; 15
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	de bf       	out	0x3e, r29	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	cd bf       	out	0x3d, r28	; 61
    28ec:	cf 91       	pop	r28
    28ee:	df 91       	pop	r29
    28f0:	08 95       	ret

000028f2 <HandleDownButton>:

void HandleDownButton(void){
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	2f 97       	sbiw	r28, 0x0f	; 15
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
    static u8 lastState = 1;
    u8 currentState = DIO_u8GetPinValue(DIO_PORTD, DIO_PIN_4);
    2906:	83 e0       	ldi	r24, 0x03	; 3
    2908:	64 e0       	ldi	r22, 0x04	; 4
    290a:	0e 94 8f 0c 	call	0x191e	; 0x191e <DIO_u8GetPinValue>
    290e:	8f 87       	std	Y+15, r24	; 0x0f

    if (currentState == 0 && lastState == 1){
    2910:	8f 85       	ldd	r24, Y+15	; 0x0f
    2912:	88 23       	and	r24, r24
    2914:	09 f0       	breq	.+2      	; 0x2918 <HandleDownButton+0x26>
    2916:	80 c0       	rjmp	.+256    	; 0x2a18 <HandleDownButton+0x126>
    2918:	80 91 6b 00 	lds	r24, 0x006B
    291c:	81 30       	cpi	r24, 0x01	; 1
    291e:	09 f0       	breq	.+2      	; 0x2922 <HandleDownButton+0x30>
    2920:	7b c0       	rjmp	.+246    	; 0x2a18 <HandleDownButton+0x126>
        if (set_temp > 35){
    2922:	80 91 68 00 	lds	r24, 0x0068
    2926:	84 32       	cpi	r24, 0x24	; 36
    2928:	28 f0       	brcs	.+10     	; 0x2934 <HandleDownButton+0x42>
            set_temp -= 5;
    292a:	80 91 68 00 	lds	r24, 0x0068
    292e:	85 50       	subi	r24, 0x05	; 5
    2930:	80 93 68 00 	sts	0x0068, r24
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	a8 e4       	ldi	r26, 0x48	; 72
    293a:	b3 e4       	ldi	r27, 0x43	; 67
    293c:	8b 87       	std	Y+11, r24	; 0x0b
    293e:	9c 87       	std	Y+12, r25	; 0x0c
    2940:	ad 87       	std	Y+13, r26	; 0x0d
    2942:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2944:	6b 85       	ldd	r22, Y+11	; 0x0b
    2946:	7c 85       	ldd	r23, Y+12	; 0x0c
    2948:	8d 85       	ldd	r24, Y+13	; 0x0d
    294a:	9e 85       	ldd	r25, Y+14	; 0x0e
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	4a e7       	ldi	r20, 0x7A	; 122
    2952:	55 e4       	ldi	r21, 0x45	; 69
    2954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	8f 83       	std	Y+7, r24	; 0x07
    295e:	98 87       	std	Y+8, r25	; 0x08
    2960:	a9 87       	std	Y+9, r26	; 0x09
    2962:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2964:	6f 81       	ldd	r22, Y+7	; 0x07
    2966:	78 85       	ldd	r23, Y+8	; 0x08
    2968:	89 85       	ldd	r24, Y+9	; 0x09
    296a:	9a 85       	ldd	r25, Y+10	; 0x0a
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e8       	ldi	r20, 0x80	; 128
    2972:	5f e3       	ldi	r21, 0x3F	; 63
    2974:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2978:	88 23       	and	r24, r24
    297a:	2c f4       	brge	.+10     	; 0x2986 <HandleDownButton+0x94>
		__ticks = 1;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	9e 83       	std	Y+6, r25	; 0x06
    2982:	8d 83       	std	Y+5, r24	; 0x05
    2984:	3f c0       	rjmp	.+126    	; 0x2a04 <HandleDownButton+0x112>
	else if (__tmp > 65535)
    2986:	6f 81       	ldd	r22, Y+7	; 0x07
    2988:	78 85       	ldd	r23, Y+8	; 0x08
    298a:	89 85       	ldd	r24, Y+9	; 0x09
    298c:	9a 85       	ldd	r25, Y+10	; 0x0a
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	3f ef       	ldi	r19, 0xFF	; 255
    2992:	4f e7       	ldi	r20, 0x7F	; 127
    2994:	57 e4       	ldi	r21, 0x47	; 71
    2996:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    299a:	18 16       	cp	r1, r24
    299c:	4c f5       	brge	.+82     	; 0x29f0 <HandleDownButton+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299e:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e2       	ldi	r20, 0x20	; 32
    29ac:	51 e4       	ldi	r21, 0x41	; 65
    29ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	bc 01       	movw	r22, r24
    29b8:	cd 01       	movw	r24, r26
    29ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9e 83       	std	Y+6, r25	; 0x06
    29c4:	8d 83       	std	Y+5, r24	; 0x05
    29c6:	0f c0       	rjmp	.+30     	; 0x29e6 <HandleDownButton+0xf4>
    29c8:	80 e9       	ldi	r24, 0x90	; 144
    29ca:	91 e0       	ldi	r25, 0x01	; 1
    29cc:	9c 83       	std	Y+4, r25	; 0x04
    29ce:	8b 83       	std	Y+3, r24	; 0x03
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	9c 81       	ldd	r25, Y+4	; 0x04
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <HandleDownButton+0xe2>
    29d8:	9c 83       	std	Y+4, r25	; 0x04
    29da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	9e 83       	std	Y+6, r25	; 0x06
    29e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e6:	8d 81       	ldd	r24, Y+5	; 0x05
    29e8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	69 f7       	brne	.-38     	; 0x29c8 <HandleDownButton+0xd6>
    29ee:	14 c0       	rjmp	.+40     	; 0x2a18 <HandleDownButton+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f0:	6f 81       	ldd	r22, Y+7	; 0x07
    29f2:	78 85       	ldd	r23, Y+8	; 0x08
    29f4:	89 85       	ldd	r24, Y+9	; 0x09
    29f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	9e 83       	std	Y+6, r25	; 0x06
    2a02:	8d 83       	std	Y+5, r24	; 0x05
    2a04:	8d 81       	ldd	r24, Y+5	; 0x05
    2a06:	9e 81       	ldd	r25, Y+6	; 0x06
    2a08:	9a 83       	std	Y+2, r25	; 0x02
    2a0a:	89 83       	std	Y+1, r24	; 0x01
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <HandleDownButton+0x11e>
    2a14:	9a 83       	std	Y+2, r25	; 0x02
    2a16:	89 83       	std	Y+1, r24	; 0x01
        }
        _delay_ms(200);
    }
    lastState = currentState;
    2a18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a1a:	80 93 6b 00 	sts	0x006B, r24
}
    2a1e:	2f 96       	adiw	r28, 0x0f	; 15
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	cf 91       	pop	r28
    2a2c:	df 91       	pop	r29
    2a2e:	08 95       	ret

00002a30 <HEATER_Update>:

extern u8 set_temp;

void HEATER_Update(void){
    2a30:	df 93       	push	r29
    2a32:	cf 93       	push	r28
    2a34:	0f 92       	push	r0
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
    static u16 blink_counter = 0;

    if (systemState == SYSTEM_ON){
    2a3a:	80 91 7f 00 	lds	r24, 0x007F
    2a3e:	81 30       	cpi	r24, 0x01	; 1
    2a40:	09 f0       	breq	.+2      	; 0x2a44 <HEATER_Update+0x14>
    2a42:	62 c0       	rjmp	.+196    	; 0x2b08 <HEATER_Update+0xd8>
        ADC_voidInit();
    2a44:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <ADC_voidInit>
        u8 sensor_temp = TEMP_Read();
    2a48:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <TEMP_Read>
    2a4c:	89 83       	std	Y+1, r24	; 0x01
        SSD_Write(set_temp);
    2a4e:	80 91 68 00 	lds	r24, 0x0068
    2a52:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <SSD_Write>

        if (sensor_temp < set_temp - 5){
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	28 2f       	mov	r18, r24
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	80 91 68 00 	lds	r24, 0x0068
    2a60:	88 2f       	mov	r24, r24
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	05 97       	sbiw	r24, 0x05	; 5
    2a66:	28 17       	cp	r18, r24
    2a68:	39 07       	cpc	r19, r25
    2a6a:	0c f5       	brge	.+66     	; 0x2aae <HEATER_Update+0x7e>
            ELEMENT_SetState(ELEMENT_HEATER, ELEMENT_ON);
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	61 e0       	ldi	r22, 0x01	; 1
    2a70:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
            ELEMENT_SetState(ELEMENT_PELTIER, ELEMENT_OFF);
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	60 e0       	ldi	r22, 0x00	; 0
    2a78:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>

            // Blink LED every second
            blink_counter++;
    2a7c:	80 91 8c 00 	lds	r24, 0x008C
    2a80:	90 91 8d 00 	lds	r25, 0x008D
    2a84:	01 96       	adiw	r24, 0x01	; 1
    2a86:	90 93 8d 00 	sts	0x008D, r25
    2a8a:	80 93 8c 00 	sts	0x008C, r24
            if (blink_counter >= 20){
    2a8e:	80 91 8c 00 	lds	r24, 0x008C
    2a92:	90 91 8d 00 	lds	r25, 0x008D
    2a96:	84 31       	cpi	r24, 0x14	; 20
    2a98:	91 05       	cpc	r25, r1
    2a9a:	08 f4       	brcc	.+2      	; 0x2a9e <HEATER_Update+0x6e>
    2a9c:	60 c0       	rjmp	.+192    	; 0x2b5e <HEATER_Update+0x12e>
                ELEMENT_ToggleState(ELEMENT_LED);
    2a9e:	82 e0       	ldi	r24, 0x02	; 2
    2aa0:	0e 94 9e 11 	call	0x233c	; 0x233c <ELEMENT_ToggleState>
                blink_counter = 0;
    2aa4:	10 92 8d 00 	sts	0x008D, r1
    2aa8:	10 92 8c 00 	sts	0x008C, r1
    2aac:	58 c0       	rjmp	.+176    	; 0x2b5e <HEATER_Update+0x12e>
            }
        }
        else if (sensor_temp > set_temp + 5){
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	80 91 68 00 	lds	r24, 0x0068
    2ab8:	88 2f       	mov	r24, r24
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	05 96       	adiw	r24, 0x05	; 5
    2abe:	82 17       	cp	r24, r18
    2ac0:	93 07       	cpc	r25, r19
    2ac2:	8c f4       	brge	.+34     	; 0x2ae6 <HEATER_Update+0xb6>
            ELEMENT_SetState(ELEMENT_HEATER, ELEMENT_OFF);
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	60 e0       	ldi	r22, 0x00	; 0
    2ac8:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
            ELEMENT_SetState(ELEMENT_PELTIER, ELEMENT_ON);
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	61 e0       	ldi	r22, 0x01	; 1
    2ad0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
            ELEMENT_SetState(ELEMENT_LED, ELEMENT_ON);
    2ad4:	82 e0       	ldi	r24, 0x02	; 2
    2ad6:	61 e0       	ldi	r22, 0x01	; 1
    2ad8:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
            blink_counter = 0;
    2adc:	10 92 8d 00 	sts	0x008D, r1
    2ae0:	10 92 8c 00 	sts	0x008C, r1
    2ae4:	3c c0       	rjmp	.+120    	; 0x2b5e <HEATER_Update+0x12e>
        }
        else {
            ELEMENT_SetState(ELEMENT_HEATER, ELEMENT_OFF);
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	60 e0       	ldi	r22, 0x00	; 0
    2aea:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
            ELEMENT_SetState(ELEMENT_PELTIER, ELEMENT_OFF);
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
            ELEMENT_SetState(ELEMENT_LED, ELEMENT_OFF);
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
            blink_counter = 0;
    2afe:	10 92 8d 00 	sts	0x008D, r1
    2b02:	10 92 8c 00 	sts	0x008C, r1
    2b06:	2b c0       	rjmp	.+86     	; 0x2b5e <HEATER_Update+0x12e>
        }
    }
    else if (systemState == SYSTEM_SETTING){
    2b08:	80 91 7f 00 	lds	r24, 0x007F
    2b0c:	82 30       	cpi	r24, 0x02	; 2
    2b0e:	a9 f4       	brne	.+42     	; 0x2b3a <HEATER_Update+0x10a>
        SSD_Write(set_temp);
    2b10:	80 91 68 00 	lds	r24, 0x0068
    2b14:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <SSD_Write>
        ELEMENT_SetState(ELEMENT_HEATER, ELEMENT_OFF);
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	60 e0       	ldi	r22, 0x00	; 0
    2b1c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
        ELEMENT_SetState(ELEMENT_PELTIER, ELEMENT_OFF);
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	60 e0       	ldi	r22, 0x00	; 0
    2b24:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
        ELEMENT_SetState(ELEMENT_LED, ELEMENT_ON);
    2b28:	82 e0       	ldi	r24, 0x02	; 2
    2b2a:	61 e0       	ldi	r22, 0x01	; 1
    2b2c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
        blink_counter = 0;
    2b30:	10 92 8d 00 	sts	0x008D, r1
    2b34:	10 92 8c 00 	sts	0x008C, r1
    2b38:	12 c0       	rjmp	.+36     	; 0x2b5e <HEATER_Update+0x12e>
    }
    else {
        ELEMENT_SetState(ELEMENT_HEATER, ELEMENT_OFF);
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	60 e0       	ldi	r22, 0x00	; 0
    2b3e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
        ELEMENT_SetState(ELEMENT_PELTIER, ELEMENT_OFF);
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	60 e0       	ldi	r22, 0x00	; 0
    2b46:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
        ELEMENT_SetState(ELEMENT_LED, ELEMENT_OFF);
    2b4a:	82 e0       	ldi	r24, 0x02	; 2
    2b4c:	60 e0       	ldi	r22, 0x00	; 0
    2b4e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
        SSD_Disable();
    2b52:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <SSD_Disable>
        blink_counter = 0;
    2b56:	10 92 8d 00 	sts	0x008D, r1
    2b5a:	10 92 8c 00 	sts	0x008C, r1
    }
}
    2b5e:	0f 90       	pop	r0
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	08 95       	ret

00002b66 <system_init>:

void system_init(void){
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	00 d0       	rcall	.+0      	; 0x2b6c <system_init+0x6>
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    ELEMENT_Init();
    2b70:	0e 94 55 11 	call	0x22aa	; 0x22aa <ELEMENT_Init>
    SSD_Init();
    2b74:	0e 94 75 0f 	call	0x1eea	; 0x1eea <SSD_Init>

    u8 init_temp = TEMP_Read();
    2b78:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <TEMP_Read>
    2b7c:	8a 83       	std	Y+2, r24	; 0x02
    for (u8 i = 0; i < 10; i++){
    2b7e:	19 82       	std	Y+1, r1	; 0x01
    2b80:	0b c0       	rjmp	.+22     	; 0x2b98 <system_init+0x32>
        temp_arr[i] = init_temp;
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	88 2f       	mov	r24, r24
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	fc 01       	movw	r30, r24
    2b8a:	e0 58       	subi	r30, 0x80	; 128
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	80 83       	st	Z, r24
void system_init(void){
    ELEMENT_Init();
    SSD_Init();

    u8 init_temp = TEMP_Read();
    for (u8 i = 0; i < 10; i++){
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	8f 5f       	subi	r24, 0xFF	; 255
    2b96:	89 83       	std	Y+1, r24	; 0x01
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	8a 30       	cpi	r24, 0x0A	; 10
    2b9c:	90 f3       	brcs	.-28     	; 0x2b82 <system_init+0x1c>
        temp_arr[i] = init_temp;
    }
    avg_temp = init_temp;
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	80 93 8a 00 	sts	0x008A, r24
}
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <OFF_state>:

void OFF_state(void){
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    ELEMENT_SetState(ELEMENT_HEATER, ELEMENT_OFF);
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	60 e0       	ldi	r22, 0x00	; 0
    2bba:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
    ELEMENT_SetState(ELEMENT_PELTIER, ELEMENT_OFF);
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	60 e0       	ldi	r22, 0x00	; 0
    2bc2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
    ELEMENT_SetState(ELEMENT_LED, ELEMENT_OFF);
    2bc6:	82 e0       	ldi	r24, 0x02	; 2
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
    SSD_Disable();
    2bce:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <SSD_Disable>
}
    2bd2:	cf 91       	pop	r28
    2bd4:	df 91       	pop	r29
    2bd6:	08 95       	ret

00002bd8 <ON_state>:

void ON_state(void){
    2bd8:	df 93       	push	r29
    2bda:	cf 93       	push	r28
    2bdc:	00 d0       	rcall	.+0      	; 0x2bde <ON_state+0x6>
    2bde:	00 d0       	rcall	.+0      	; 0x2be0 <ON_state+0x8>
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62
    static u8 temp_index = 0;
    u8 temp = TEMP_Read();
    2be4:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <TEMP_Read>
    2be8:	8c 83       	std	Y+4, r24	; 0x04

    temp_arr[temp_index] = temp;
    2bea:	80 91 8e 00 	lds	r24, 0x008E
    2bee:	88 2f       	mov	r24, r24
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	e0 58       	subi	r30, 0x80	; 128
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfa:	80 83       	st	Z, r24
    temp_index = (temp_index + 1) % 10;
    2bfc:	80 91 8e 00 	lds	r24, 0x008E
    2c00:	88 2f       	mov	r24, r24
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	01 96       	adiw	r24, 0x01	; 1
    2c06:	2a e0       	ldi	r18, 0x0A	; 10
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	b9 01       	movw	r22, r18
    2c0c:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__divmodhi4>
    2c10:	80 93 8e 00 	sts	0x008E, r24

    u16 sum = 0;
    2c14:	1b 82       	std	Y+3, r1	; 0x03
    2c16:	1a 82       	std	Y+2, r1	; 0x02
    for (u8 i = 0; i < 10; i++){
    2c18:	19 82       	std	Y+1, r1	; 0x01
    2c1a:	12 c0       	rjmp	.+36     	; 0x2c40 <ON_state+0x68>
        sum += temp_arr[i];
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	88 2f       	mov	r24, r24
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	fc 01       	movw	r30, r24
    2c24:	e0 58       	subi	r30, 0x80	; 128
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 81       	ld	r24, Z
    2c2a:	28 2f       	mov	r18, r24
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	9b 81       	ldd	r25, Y+3	; 0x03
    2c32:	82 0f       	add	r24, r18
    2c34:	93 1f       	adc	r25, r19
    2c36:	9b 83       	std	Y+3, r25	; 0x03
    2c38:	8a 83       	std	Y+2, r24	; 0x02

    temp_arr[temp_index] = temp;
    temp_index = (temp_index + 1) % 10;

    u16 sum = 0;
    for (u8 i = 0; i < 10; i++){
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	8f 5f       	subi	r24, 0xFF	; 255
    2c3e:	89 83       	std	Y+1, r24	; 0x01
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	8a 30       	cpi	r24, 0x0A	; 10
    2c44:	58 f3       	brcs	.-42     	; 0x2c1c <ON_state+0x44>
        sum += temp_arr[i];
    }
    avg_temp = sum / 10;
    2c46:	8a 81       	ldd	r24, Y+2	; 0x02
    2c48:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4a:	2a e0       	ldi	r18, 0x0A	; 10
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	b9 01       	movw	r22, r18
    2c50:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__udivmodhi4>
    2c54:	cb 01       	movw	r24, r22
    2c56:	80 93 8a 00 	sts	0x008A, r24

    SSD_Write(avg_temp);
    2c5a:	80 91 8a 00 	lds	r24, 0x008A
    2c5e:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <SSD_Write>
    change_temp();
    2c62:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <change_temp>
}
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <change_temp>:

void change_temp(void){
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    if (avg_temp >= set_temp - 5 && avg_temp <= set_temp + 5){
    2c7c:	80 91 8a 00 	lds	r24, 0x008A
    2c80:	28 2f       	mov	r18, r24
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	80 91 68 00 	lds	r24, 0x0068
    2c88:	88 2f       	mov	r24, r24
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	05 97       	sbiw	r24, 0x05	; 5
    2c8e:	28 17       	cp	r18, r24
    2c90:	39 07       	cpc	r19, r25
    2c92:	cc f0       	brlt	.+50     	; 0x2cc6 <change_temp+0x52>
    2c94:	80 91 8a 00 	lds	r24, 0x008A
    2c98:	28 2f       	mov	r18, r24
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	80 91 68 00 	lds	r24, 0x0068
    2ca0:	88 2f       	mov	r24, r24
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	05 96       	adiw	r24, 0x05	; 5
    2ca6:	82 17       	cp	r24, r18
    2ca8:	93 07       	cpc	r25, r19
    2caa:	6c f0       	brlt	.+26     	; 0x2cc6 <change_temp+0x52>
        ELEMENT_SetState(ELEMENT_HEATER, ELEMENT_OFF);
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	60 e0       	ldi	r22, 0x00	; 0
    2cb0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
        ELEMENT_SetState(ELEMENT_PELTIER, ELEMENT_OFF);
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
        ELEMENT_SetState(ELEMENT_LED, ELEMENT_OFF);
    2cbc:	82 e0       	ldi	r24, 0x02	; 2
    2cbe:	60 e0       	ldi	r22, 0x00	; 0
    2cc0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
    2cc4:	31 c0       	rjmp	.+98     	; 0x2d28 <change_temp+0xb4>
    } else if (avg_temp > set_temp + 5){
    2cc6:	80 91 8a 00 	lds	r24, 0x008A
    2cca:	28 2f       	mov	r18, r24
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	80 91 68 00 	lds	r24, 0x0068
    2cd2:	88 2f       	mov	r24, r24
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	05 96       	adiw	r24, 0x05	; 5
    2cd8:	82 17       	cp	r24, r18
    2cda:	93 07       	cpc	r25, r19
    2cdc:	6c f4       	brge	.+26     	; 0x2cf8 <change_temp+0x84>
        ELEMENT_SetState(ELEMENT_PELTIER, ELEMENT_ON);
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	61 e0       	ldi	r22, 0x01	; 1
    2ce2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
        ELEMENT_SetState(ELEMENT_HEATER, ELEMENT_OFF);
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	60 e0       	ldi	r22, 0x00	; 0
    2cea:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
        ELEMENT_SetState(ELEMENT_LED, ELEMENT_ON);
    2cee:	82 e0       	ldi	r24, 0x02	; 2
    2cf0:	61 e0       	ldi	r22, 0x01	; 1
    2cf2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
    2cf6:	18 c0       	rjmp	.+48     	; 0x2d28 <change_temp+0xb4>
    } else if (avg_temp < set_temp - 5){
    2cf8:	80 91 8a 00 	lds	r24, 0x008A
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	80 91 68 00 	lds	r24, 0x0068
    2d04:	88 2f       	mov	r24, r24
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	05 97       	sbiw	r24, 0x05	; 5
    2d0a:	28 17       	cp	r18, r24
    2d0c:	39 07       	cpc	r19, r25
    2d0e:	64 f4       	brge	.+24     	; 0x2d28 <change_temp+0xb4>
        ELEMENT_SetState(ELEMENT_HEATER, ELEMENT_ON);
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	61 e0       	ldi	r22, 0x01	; 1
    2d14:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
        ELEMENT_SetState(ELEMENT_PELTIER, ELEMENT_OFF);
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	60 e0       	ldi	r22, 0x00	; 0
    2d1c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
        ELEMENT_SetState(ELEMENT_LED, ELEMENT_ON);
    2d20:	82 e0       	ldi	r24, 0x02	; 2
    2d22:	61 e0       	ldi	r22, 0x01	; 1
    2d24:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <ELEMENT_SetState>
    }
}
    2d28:	cf 91       	pop	r28
    2d2a:	df 91       	pop	r29
    2d2c:	08 95       	ret

00002d2e <main>:
#include "../MCAL/DIO/DIO_int.h"
#include "../APP/Heat_control.h"
#include <util/delay.h>
#include "../MCAL/EEPROM/EEPROM_int.h"

int main(void){
    2d2e:	df 93       	push	r29
    2d30:	cf 93       	push	r28
    2d32:	0f 92       	push	r0
    2d34:	cd b7       	in	r28, 0x3d	; 61
    2d36:	de b7       	in	r29, 0x3e	; 62
	u8 set_temp = 60;
    2d38:	8c e3       	ldi	r24, 0x3C	; 60
    2d3a:	89 83       	std	Y+1, r24	; 0x01
    DIO_voidInit();
    2d3c:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_voidInit>
    ADC_voidInit();
    2d40:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <ADC_voidInit>
    HEATER_Init();
    2d44:	0e 94 02 13 	call	0x2604	; 0x2604 <HEATER_Init>
    EEPROM_voidInit();
    2d48:	0e 94 ae 08 	call	0x115c	; 0x115c <EEPROM_voidInit>
    IN_EEPROM_voidReadDataByte(EEPROM_SET_TEMP_ADDRESS, &set_temp);
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	9e 01       	movw	r18, r28
    2d52:	2f 5f       	subi	r18, 0xFF	; 255
    2d54:	3f 4f       	sbci	r19, 0xFF	; 255
    2d56:	b9 01       	movw	r22, r18
    2d58:	0e 94 b5 08 	call	0x116a	; 0x116a <IN_EEPROM_voidReadDataByte>

    while(1){
        HEATER_HandleOnOffButton();
    2d5c:	0e 94 3a 13 	call	0x2674	; 0x2674 <HEATER_HandleOnOffButton>
        HandleUpButton();
    2d60:	0e 94 da 13 	call	0x27b4	; 0x27b4 <HandleUpButton>
        HandleDownButton();
    2d64:	0e 94 79 14 	call	0x28f2	; 0x28f2 <HandleDownButton>
        HEATER_Update();
    2d68:	0e 94 18 15 	call	0x2a30	; 0x2a30 <HEATER_Update>
    2d6c:	f7 cf       	rjmp	.-18     	; 0x2d5c <main+0x2e>

00002d6e <__mulsi3>:
    2d6e:	62 9f       	mul	r22, r18
    2d70:	d0 01       	movw	r26, r0
    2d72:	73 9f       	mul	r23, r19
    2d74:	f0 01       	movw	r30, r0
    2d76:	82 9f       	mul	r24, r18
    2d78:	e0 0d       	add	r30, r0
    2d7a:	f1 1d       	adc	r31, r1
    2d7c:	64 9f       	mul	r22, r20
    2d7e:	e0 0d       	add	r30, r0
    2d80:	f1 1d       	adc	r31, r1
    2d82:	92 9f       	mul	r25, r18
    2d84:	f0 0d       	add	r31, r0
    2d86:	83 9f       	mul	r24, r19
    2d88:	f0 0d       	add	r31, r0
    2d8a:	74 9f       	mul	r23, r20
    2d8c:	f0 0d       	add	r31, r0
    2d8e:	65 9f       	mul	r22, r21
    2d90:	f0 0d       	add	r31, r0
    2d92:	99 27       	eor	r25, r25
    2d94:	72 9f       	mul	r23, r18
    2d96:	b0 0d       	add	r27, r0
    2d98:	e1 1d       	adc	r30, r1
    2d9a:	f9 1f       	adc	r31, r25
    2d9c:	63 9f       	mul	r22, r19
    2d9e:	b0 0d       	add	r27, r0
    2da0:	e1 1d       	adc	r30, r1
    2da2:	f9 1f       	adc	r31, r25
    2da4:	bd 01       	movw	r22, r26
    2da6:	cf 01       	movw	r24, r30
    2da8:	11 24       	eor	r1, r1
    2daa:	08 95       	ret

00002dac <__udivmodqi4>:
    2dac:	99 1b       	sub	r25, r25
    2dae:	79 e0       	ldi	r23, 0x09	; 9
    2db0:	04 c0       	rjmp	.+8      	; 0x2dba <__udivmodqi4_ep>

00002db2 <__udivmodqi4_loop>:
    2db2:	99 1f       	adc	r25, r25
    2db4:	96 17       	cp	r25, r22
    2db6:	08 f0       	brcs	.+2      	; 0x2dba <__udivmodqi4_ep>
    2db8:	96 1b       	sub	r25, r22

00002dba <__udivmodqi4_ep>:
    2dba:	88 1f       	adc	r24, r24
    2dbc:	7a 95       	dec	r23
    2dbe:	c9 f7       	brne	.-14     	; 0x2db2 <__udivmodqi4_loop>
    2dc0:	80 95       	com	r24
    2dc2:	08 95       	ret

00002dc4 <__udivmodhi4>:
    2dc4:	aa 1b       	sub	r26, r26
    2dc6:	bb 1b       	sub	r27, r27
    2dc8:	51 e1       	ldi	r21, 0x11	; 17
    2dca:	07 c0       	rjmp	.+14     	; 0x2dda <__udivmodhi4_ep>

00002dcc <__udivmodhi4_loop>:
    2dcc:	aa 1f       	adc	r26, r26
    2dce:	bb 1f       	adc	r27, r27
    2dd0:	a6 17       	cp	r26, r22
    2dd2:	b7 07       	cpc	r27, r23
    2dd4:	10 f0       	brcs	.+4      	; 0x2dda <__udivmodhi4_ep>
    2dd6:	a6 1b       	sub	r26, r22
    2dd8:	b7 0b       	sbc	r27, r23

00002dda <__udivmodhi4_ep>:
    2dda:	88 1f       	adc	r24, r24
    2ddc:	99 1f       	adc	r25, r25
    2dde:	5a 95       	dec	r21
    2de0:	a9 f7       	brne	.-22     	; 0x2dcc <__udivmodhi4_loop>
    2de2:	80 95       	com	r24
    2de4:	90 95       	com	r25
    2de6:	bc 01       	movw	r22, r24
    2de8:	cd 01       	movw	r24, r26
    2dea:	08 95       	ret

00002dec <__divmodhi4>:
    2dec:	97 fb       	bst	r25, 7
    2dee:	09 2e       	mov	r0, r25
    2df0:	07 26       	eor	r0, r23
    2df2:	0a d0       	rcall	.+20     	; 0x2e08 <__divmodhi4_neg1>
    2df4:	77 fd       	sbrc	r23, 7
    2df6:	04 d0       	rcall	.+8      	; 0x2e00 <__divmodhi4_neg2>
    2df8:	e5 df       	rcall	.-54     	; 0x2dc4 <__udivmodhi4>
    2dfa:	06 d0       	rcall	.+12     	; 0x2e08 <__divmodhi4_neg1>
    2dfc:	00 20       	and	r0, r0
    2dfe:	1a f4       	brpl	.+6      	; 0x2e06 <__divmodhi4_exit>

00002e00 <__divmodhi4_neg2>:
    2e00:	70 95       	com	r23
    2e02:	61 95       	neg	r22
    2e04:	7f 4f       	sbci	r23, 0xFF	; 255

00002e06 <__divmodhi4_exit>:
    2e06:	08 95       	ret

00002e08 <__divmodhi4_neg1>:
    2e08:	f6 f7       	brtc	.-4      	; 0x2e06 <__divmodhi4_exit>
    2e0a:	90 95       	com	r25
    2e0c:	81 95       	neg	r24
    2e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e10:	08 95       	ret

00002e12 <__prologue_saves__>:
    2e12:	2f 92       	push	r2
    2e14:	3f 92       	push	r3
    2e16:	4f 92       	push	r4
    2e18:	5f 92       	push	r5
    2e1a:	6f 92       	push	r6
    2e1c:	7f 92       	push	r7
    2e1e:	8f 92       	push	r8
    2e20:	9f 92       	push	r9
    2e22:	af 92       	push	r10
    2e24:	bf 92       	push	r11
    2e26:	cf 92       	push	r12
    2e28:	df 92       	push	r13
    2e2a:	ef 92       	push	r14
    2e2c:	ff 92       	push	r15
    2e2e:	0f 93       	push	r16
    2e30:	1f 93       	push	r17
    2e32:	cf 93       	push	r28
    2e34:	df 93       	push	r29
    2e36:	cd b7       	in	r28, 0x3d	; 61
    2e38:	de b7       	in	r29, 0x3e	; 62
    2e3a:	ca 1b       	sub	r28, r26
    2e3c:	db 0b       	sbc	r29, r27
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	f8 94       	cli
    2e42:	de bf       	out	0x3e, r29	; 62
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	cd bf       	out	0x3d, r28	; 61
    2e48:	09 94       	ijmp

00002e4a <__epilogue_restores__>:
    2e4a:	2a 88       	ldd	r2, Y+18	; 0x12
    2e4c:	39 88       	ldd	r3, Y+17	; 0x11
    2e4e:	48 88       	ldd	r4, Y+16	; 0x10
    2e50:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e52:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e54:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e56:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e58:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e5a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e5c:	b9 84       	ldd	r11, Y+9	; 0x09
    2e5e:	c8 84       	ldd	r12, Y+8	; 0x08
    2e60:	df 80       	ldd	r13, Y+7	; 0x07
    2e62:	ee 80       	ldd	r14, Y+6	; 0x06
    2e64:	fd 80       	ldd	r15, Y+5	; 0x05
    2e66:	0c 81       	ldd	r16, Y+4	; 0x04
    2e68:	1b 81       	ldd	r17, Y+3	; 0x03
    2e6a:	aa 81       	ldd	r26, Y+2	; 0x02
    2e6c:	b9 81       	ldd	r27, Y+1	; 0x01
    2e6e:	ce 0f       	add	r28, r30
    2e70:	d1 1d       	adc	r29, r1
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	f8 94       	cli
    2e76:	de bf       	out	0x3e, r29	; 62
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	cd bf       	out	0x3d, r28	; 61
    2e7c:	ed 01       	movw	r28, r26
    2e7e:	08 95       	ret

00002e80 <itoa>:
    2e80:	fb 01       	movw	r30, r22
    2e82:	9f 01       	movw	r18, r30
    2e84:	e8 94       	clt
    2e86:	42 30       	cpi	r20, 0x02	; 2
    2e88:	c4 f0       	brlt	.+48     	; 0x2eba <itoa+0x3a>
    2e8a:	45 32       	cpi	r20, 0x25	; 37
    2e8c:	b4 f4       	brge	.+44     	; 0x2eba <itoa+0x3a>
    2e8e:	4a 30       	cpi	r20, 0x0A	; 10
    2e90:	29 f4       	brne	.+10     	; 0x2e9c <itoa+0x1c>
    2e92:	97 fb       	bst	r25, 7
    2e94:	1e f4       	brtc	.+6      	; 0x2e9c <itoa+0x1c>
    2e96:	90 95       	com	r25
    2e98:	81 95       	neg	r24
    2e9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e9c:	64 2f       	mov	r22, r20
    2e9e:	77 27       	eor	r23, r23
    2ea0:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__udivmodhi4>
    2ea4:	80 5d       	subi	r24, 0xD0	; 208
    2ea6:	8a 33       	cpi	r24, 0x3A	; 58
    2ea8:	0c f0       	brlt	.+2      	; 0x2eac <itoa+0x2c>
    2eaa:	89 5d       	subi	r24, 0xD9	; 217
    2eac:	81 93       	st	Z+, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	00 97       	sbiw	r24, 0x00	; 0
    2eb2:	a1 f7       	brne	.-24     	; 0x2e9c <itoa+0x1c>
    2eb4:	16 f4       	brtc	.+4      	; 0x2eba <itoa+0x3a>
    2eb6:	5d e2       	ldi	r21, 0x2D	; 45
    2eb8:	51 93       	st	Z+, r21
    2eba:	10 82       	st	Z, r1
    2ebc:	c9 01       	movw	r24, r18
    2ebe:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <strrev>

00002ec2 <strrev>:
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	67 2f       	mov	r22, r23
    2ec8:	71 91       	ld	r23, Z+
    2eca:	77 23       	and	r23, r23
    2ecc:	e1 f7       	brne	.-8      	; 0x2ec6 <strrev+0x4>
    2ece:	32 97       	sbiw	r30, 0x02	; 2
    2ed0:	04 c0       	rjmp	.+8      	; 0x2eda <strrev+0x18>
    2ed2:	7c 91       	ld	r23, X
    2ed4:	6d 93       	st	X+, r22
    2ed6:	70 83       	st	Z, r23
    2ed8:	62 91       	ld	r22, -Z
    2eda:	ae 17       	cp	r26, r30
    2edc:	bf 07       	cpc	r27, r31
    2ede:	c8 f3       	brcs	.-14     	; 0x2ed2 <strrev+0x10>
    2ee0:	08 95       	ret

00002ee2 <_exit>:
    2ee2:	f8 94       	cli

00002ee4 <__stop_program>:
    2ee4:	ff cf       	rjmp	.-2      	; 0x2ee4 <__stop_program>
